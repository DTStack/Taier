<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dtstack.engine.mapper.ScheduleJobMapper">

    <sql id="select_content_fragment">
        bj.id,bj.tenant_id,bj.job_id,bj.job_key,bj.job_name,bj.task_id,bj.gmt_create,bj.gmt_modified,bj.create_user_id,bj.is_deleted,bj.type,bj.is_restart,
        bj.cyc_time,dependency_type,flow_job_id,bj.period_type,bj.status,bj.task_type,bj.fill_id,bj.exec_start_time,bj.exec_end_time,bj.exec_time,bj.submit_time,bj.retry_num,max_retry_num,
        bj.node_address,bj.version_id,bj.next_cyc_time,bj.compute_type,bj.submit_user_name,bj.engine_job_id,bj.fill_type
    </sql>

    <sql id="select_filed_all">
        `id`,`tenant_id`,`job_id`,`job_key`,`job_name`,`task_id`,`gmt_create`,`gmt_modified`,`create_user_id`,`is_deleted`,`type`,`is_restart`,`cyc_time`
            ,`dependency_type`,`flow_job_id`,`period_type`,`status`,`task_type`,`fill_id`,`exec_start_time`,`exec_end_time`,`exec_time`,`submit_time`,`max_retry_num`,`retry_num`,`node_address`,`version_id`
            ,`next_cyc_time`,`engine_job_id`,`application_id`,`compute_type`,`phase_status`,`submit_user_name`,`fill_type`
    </sql>

    <select id="getOne" resultType="ScheduleJob">
        SELECT
        <include refid="select_content_fragment"/>
        FROM schedule_job bj
        WHERE id = #{id} AND is_deleted = 0
    </select>

    <select id="countByFillIdGetAllStatus" resultType="com.dtstack.engine.domain.po.CountFillDataJobStatusPO">
        SELECT
            status*1 AS status,
            count(status) AS count,
            fill_id AS fillId
        FROM
            schedule_job
        WHERE
            is_deleted = 0
            AND task_type != 10
            AND type = 1
            AND fill_type IN (0,1)
            AND fill_id in
            <foreach collection="fillIdList" index="index" item="fillId" open="(" close=")" separator=",">
                #{fillId}
            </foreach>
            GROUP BY fill_id,status
    </select>

    <select id="getByTaskIdAndStatusOrderByIdLimit" resultType="ScheduleJob">
        SELECT
        *
        FROM schedule_job job
        WHERE job.task_id = #{taskId} and  #{time} > STR_TO_DATE(job.cyc_time,"%Y%m%d%H%i%s")
        and job.status = #{status}
        and job.is_deleted = 0
        <if test="type !=null">
            and job.type = #{type}
        </if>
        order by job.cyc_time desc limit 1
    </select>

    <select id="listJobByStatusAddressAndPhaseStatus"
            resultType="com.dtstack.engine.domain.po.SimpleScheduleJobPO">
        SELECT id, job_id, type, phase_status
        FROM schedule_job
        WHERE id > #{startId} AND (node_address = #{nodeAddress} or node_address is null)
        <if test="statuses != null">
            AND status IN
            <foreach item="status" index="index" collection="statuses" open="(" separator="," close=")">
                #{status}
            </foreach>
        </if>
        AND is_deleted = 0
        AND `phase_status` = #{phaseStatus}
        order by id asc limit 500
    </select>

    <update id="updateJobStatusAndExecTime">
        update schedule_job set gmt_modified=now(), exec_end_time=now(), status=#{status}, exec_time=timestampdiff(SECOND, exec_start_time, now()) where job_id=#{jobId};
    </update>

    <select id="queryJobsStatusStatistics" resultType="com.dtstack.engine.domain.po.StatusCountPO">
        SELECT
            status,
            COUNT(1) as count
        FROM schedule_job
        WHERE
            tenant_id = #{statistics.tenantId}
            <if test="statistics.userId!=null">
               AND `create_user_id` = #{statistics.userId}
            </if>
            <if test="statistics.cycStartTime!=null and statistics.cycStartTime!='' and statistics.cycEndTime!='' and statistics.cycEndTime!=null">
                AND `cyc_time` &gt; #{statistics.cycStartTime} AND `cyc_time` &lt;= #{statistics.cycEndTime}
            </if>
            <if test="statistics.taskIdList!=null and statistics.taskIdList.size!=0">
                AND task_id IN
                <foreach collection="statistics.taskIdList" open="(" close=")" item="taskId" separator=",">
                    #{taskId}
                </foreach>
            </if>
            <if test="statistics.taskTypeList!=null and statistics.taskTypeList.size!=0">
                AND `task_type` IN
                <foreach collection="statistics.taskTypeList" open="(" close=")" item="taskType" separator=",">
                    #{taskType}
                </foreach>
            </if>
            <if test="statistics.jobStatusList!=null and statistics.jobStatusList.size!=0">
                AND `task_type` IN
                <foreach collection="statistics.jobStatusList" open="(" close=")" item="status" separator=",">
                    #{status}
                </foreach>
            </if>
            <if test="statistics.taskPeriodTypeList!=null and statistics.taskPeriodTypeList.size!=0">
                AND `period_type` IN
                <foreach collection="statistics.taskPeriodTypeList" open="(" close=")" item="periodType" separator=",">
                    #{periodType}
                </foreach>
            </if>
            <if test="statistics.fillTypeList!=null and statistics.fillTypeList.size!=0">
                AND `fill_type` IN
                <foreach collection="statistics.fillTypeList" open="(" close=")" item="fillType" separator=",">
                    #{fillType}
                </foreach>
            </if>
            <if test="statistics.type!=null" >
                AND `type` = #{statistics.type}
            </if>
            <if test="statistics.fillId!=null">
                AND `fill_id` = #{statistics.fillId}
            </if>
        GROUP BY status

    </select>

    <select id="listAfterOrBeforeJobs" resultType="com.dtstack.engine.domain.ScheduleJob">
        SELECT
            `job_id`,`cyc_time`,`status`
        FROM `schedule_job`
        WHERE `task_id` = #{taskId}
            AND type = #{type}
        <choose>
            <when test="isAfter">
                AND `cyc_time` > #{cycTime}
            </when>
            <otherwise>
                <![CDATA[ AND `cyc_time` < ]]> #{cycTime}
            </otherwise>
        </choose>
    </select>

    <select id="countByCycTimeAndJobName" resultType="java.lang.Integer">
        SELECT
        count(1)
        FROM schedule_job bj
        WHERE cyc_time like '${cycTime}%'
        AND job_name LIKE '${jobName}%'
        AND is_deleted = 0
        <if test="type != null">
            AND type = #{type}
        </if>
    </select>

    <select id="listByCycTimeAndJobName" resultType="com.dtstack.engine.domain.ScheduleJob">
        SELECT
        <include refid="select_content_fragment"/>
        FROM schedule_job bj
        WHERE id > #{startId}
        AND cyc_time LIKE '${cycTime}%'
        AND job_name LIKE '${jobName}%'
        AND is_deleted = 0
        <if test="type != null">
            AND type = #{type}
        </if>
        limit #{jobSize}
    </select>

    <select id="getByJobKeyAndType" resultType="ScheduleJob">
        SELECT
        <include refid="select_content_fragment"/>
        FROM schedule_job bj
        WHERE job_key = #{jobKey} AND type = #{type} AND is_deleted = 0
    </select>

    <select id="listJobByJobKeys" resultType="ScheduleJob">
        SELECT
        <include refid="select_content_fragment"/>
        FROM schedule_job bj
        where job_key IN
        <foreach item="jobKey" index="index" collection="jobKeys" open="(" separator="," close=")">
            #{jobKey}
        </foreach>
        AND is_deleted = 0
    </select>

    <select id="listIdByTaskIdAndStatus" resultType="ScheduleJob">
        SELECT
        <include refid="select_content_fragment"/>
        FROM schedule_job bj
        where bj.task_id = #{taskId}
        AND bj.status IN
        <foreach item="status" index="index" collection="statuses" open="(" separator="," close=")">
            #{status}
        </foreach>
        AND bj.is_deleted = 0
        <!--AND bj.app_type = #{appType}-->
        <if test="cycTime!=null">
            AND bj.cyc_time >= #{cycTime}
        </if>
        <if test="type!=null">
            AND bj.type = #{type}
        </if>
    </select>

    <select id="listJobIdByTaskIdAndStatus" resultType="java.lang.String">
        SELECT
        bj.job_id
        FROM schedule_job bj
        where  bj.task_id = #{taskId}
        <!--AND bj.app_type =#{appType}-->
        AND bj.status IN
        <foreach item="status" index="index" collection="statuses" open="(" separator="," close=")">
            #{status}
        </foreach>
        AND bj.is_deleted = 0
    </select>

    <select id="getByJobId" resultType="ScheduleJob">
        SELECT
        <include refid="select_content_fragment"/>
        FROM schedule_job bj
        where job_id = #{jobId}
        <if test="isDeleted!=null">
            and is_deleted = #{isDeleted}
        </if>
    </select>

    <select id="generalQuery" parameterType="com.dtstack.engine.pager.PageQuery" resultType="ScheduleJob">
        SELECT
        <include refid="select_content_fragment"/>
        FROM schedule_job bj
        <include refid="select_where_fragment"/>
        <include refid="queryWorkFlow"/>
        <if test="model.jobIds != null and model.jobIds.size > 0">
            or bj.job_id in
            <foreach collection="model.jobIds" item="jobId" open="(" separator="," close=")">
                #{jobId}
            </foreach>
        </if>
        <if test="model.pageQuery == true">
            <include refid="page_condition"/>
        </if>
    </select>

    <select id="generalCount" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM schedule_job bj
        <include refid="select_where_fragment"/>
        <include refid="queryWorkFlow"/>
        <if test="model.jobIds != null and model.jobIds.size > 0">
            or bj.job_id in
            <foreach collection="model.jobIds" item="jobId" open="(" separator="," close=")">
                #{jobId}
            </foreach>
        </if>
        limit 1
    </select>

    <sql id="page_condition">
        <trim prefix="ORDER BY " prefixOverrides=",">
            <if test="model.execTimeSort != null and model.execTimeSort != ''">
                , bj.exec_time ${model.execTimeSort}
            </if>
            <if test="model.execStartSort != null and model.execStartSort != ''">
                , bj.exec_start_time ${model.execStartSort}
            </if>
            <if test="model.execEndSort != null and model.execEndSort != ''">
                , bj.exec_end_time ${model.execEndSort}
            </if>
            <if test="model.cycSort != null and model.cycSort != ''">
                , bj.cyc_time ${model.cycSort}
            </if>
            <if test="model.businessDateSort != null and model.businessDateSort != ''">
                , bj.business_date ${model.businessDateSort}
            </if>
            <if test="model.retryNumSort != null and model.retryNumSort != ''">
                , bj.retry_num ${model.retryNumSort}
            </if>
            <if test="orderBy != null and orderBy != ''">
                , bj.${orderBy} ${sort}
            </if>
            , bj.gmt_create desc
        </trim>
        <if test="start != null and pageSize != null">
            limit #{start} , #{pageSize}
        </if>
        <if test="start == null and pageSize != null">
            limit #{pageSize}
        </if>
        <if test="start == null and pageSize == null">
            limit 1000
        </if>
    </sql>

    <sql id="queryWorkFlow">
        <if test="model.queryWorkFlowModel == 1">
            AND bj.flow_job_id = "0"
        </if>
        <if test="model.queryWorkFlowModel == 2">
            AND bj.flow_job_id != "0"
        </if>
        <if test="model.queryWorkFlowModel == 4">
            AND bj.task_type != 10
        </if>
    </sql>

    <sql id="select_where_fragment">
        <trim prefix="WHERE" prefixOverrides="AND |OR ">
            <if test="model.id != null and model.id > 0">
                AND bj.id = #{model.id}
            </if>
            <if test="model.jobId != null">
                AND bj.job_id = #{model.jobId}
            </if>
            <if test="model.jobKey != null">
                AND bj.job_key = #{model.jobKey}
            </if>
            <if test="model.jobName != null">
                AND bj.job_name = #{model.jobName}
            </if>
            <if test="model.taskId != null">
                AND bj.task_id = #{model.taskId}
            </if>
            <if test="model.gmtCreate != null">
                AND bj.gmt_create = #{model.gmtCreate}
            </if>
            <if test="model.gmtModified != null">
                AND bj.gmt_modified = #{model.gmtModified}
            </if>
            <if test="model.createUserId != null">
                AND bj.create_user_id = #{model.createUserId}
            </if>
            <if test="model.isDeleted != null">
                AND bj.is_deleted = #{model.isDeleted}
            </if>
            <if test="model.type != null">
                AND bj.type = #{model.type}
            </if>
            <if test="model.isRestart != null">
                AND bj.is_restart = #{model.isRestart}
            </if>
            <if test="model.likeBusinessDate != null">
                AND bj.business_date like '${model.likeBusinessDate}%'
            </if>
            <if test="model.cycTime != null">
                AND bj.cyc_time = #{model.cycTime}
            </if>
            <if test="model.taskIds != null and model.taskIds.size() > 0">
                AND bj.task_id IN
                <foreach item="taskId" index="index" collection="model.taskIds" open="(" separator="," close=")">
                    #{taskId}
                </foreach>
            </if>
            <if test="model.jobStatuses != null and model.jobStatuses.size() > 0">
                AND bj.status IN
                <foreach item="status" index="index" collection="model.jobStatuses" open="(" separator="," close=")">
                    #{status}
                </foreach>
            </if>

            <if test="model.types != null and model.types.size() > 0">
                AND bj.type IN
                <foreach item="type" index="index" collection="model.types" open="(" separator="," close=")">
                    #{type}
                </foreach>
            </if>

            <if test="model.execTime != null">
                AND bj.exec_time &gt;= #{model.execTime}
            </if>

            <if test="model.taskTypes != null and model.taskTypes.size() > 0">
                AND bj.task_type IN
                <foreach item="item" index="index" collection="model.taskTypes" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="model.cycStartDay != null and model.cycEndDay != null">
                AND bj.cyc_time <![CDATA[>=]]> #{model.cycStartDay}
                and bj.cyc_time <![CDATA[<]]> #{model.cycEndDay}
            </if>
            <if test="model.jobNameRightLike != null">
                AND bj.job_name LIKE '${model.jobNameRightLike}%'
            </if>

            <if test="model.startGmtCreate != null">
                AND to_days(bj.gmt_create) = to_days(#{model.startGmtCreate})
            </if>
            <if test="model.taskPeriodId != null and model.taskPeriodId.size()>0">
                AND bj.period_type IN
                <foreach collection="model.taskPeriodId" separator="," index="index" item="item" open="(" close=")">
                    ${item}
                </foreach>
            </if>

            <if test="model.flowJobId != null">
                AND bj.flow_job_id = #{model.flowJobId}
            </if>
            <if test="model.needQuerySonNode == false and model.flowJobId == null">
                AND bj.flow_job_id = 0
            </if>
            <if test="model.execStartDay != null and model.execEndDay != null">
                AND bj.exec_start_time &gt;= #{model.execStartDay} and bj.exec_start_time &lt;= #{model.execEndDay}
            </if>
            <if test="model.bizEndDay != null and model.bizStartDay != null">
                AND bj.business_date &gt;= #{model.bizStartDay} and bj.business_date &lt;= #{model.bizEndDay}
            </if>

        </trim>
    </sql>

    <update id="updateStatusWithExecTime" parameterType="ScheduleJob">
        UPDATE
        schedule_job
        SET
        <if test="execStartTime != null">
            exec_start_time = #{execStartTime},
        </if>
        <if test="execEndTime != null">
            exec_end_time = #{execEndTime},
        </if>
        <if test="execTime != null">
            exec_time = #{execTime},
        </if>
        status = #{status},gmt_modified=now()
        WHERE job_id = #{jobId} AND is_deleted = 0
    </update>

    <select id="listTaskExeInfo" resultType="java.util.HashMap">
        select a.exec_start_time as execStartTime, a.exec_end_time as execEndTime,  a.job_id as jobId, ifnull(a.type, 0) as type,
        ifnull(a.status, 0) as status, a.exec_time as execTime from schedule_job a
        where a.task_id = #{taskId}
        order by a.exec_start_time desc limit #{limitNum};
    </select>

    <select id="getSubJobsAndStatusByFlowId" resultType="ScheduleJob">
        SELECT
        <include refid="select_content_fragment"/>
        FROM schedule_job bj
        WHERE flow_job_id = #{jobId} AND is_deleted = 0 AND flow_job_id != '0'
    </select>

    <select id="listByJobIdList" resultType="ScheduleJob">
        SELECT
        <include refid="select_content_fragment"/>
        FROM schedule_job bj
        where job_id in
        <foreach collection="jobIds" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>

    <select id="getStatusByJobId" resultType="java.lang.Integer">
        SELECT
        status
        FROM schedule_job
        WHERE job_id = #{jobId} AND is_deleted = 0
    </select>

    <select id="countTasksByCycTimeTypeAndAddress" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM schedule_job
        WHERE node_address = #{nodeAddress}
        AND type = #{scheduleType}
        AND task_type != 10
        <if test="cycStartTime != null">
            AND cyc_time &gt;= #{cycStartTime}
        </if>
        <if test="cycEndTime != null">
            AND cyc_time &lt; #{cycEndTime}
        </if>
        AND (status = 0 or (status = 10 and task_type in (10, 14)))
        AND is_deleted = 0
    </select>

    <select id="listSimpleJobByStatusAddress" resultType="SimpleScheduleJobPO">
        SELECT id, job_id, type, phase_status
        FROM schedule_job
        WHERE id > #{startId} AND (node_address = #{nodeAddress} or node_address is null)
        <if test="statuses != null">
            AND status IN
            <foreach item="status" index="index" collection="statuses" open="(" separator="," close=")">
                #{status}
            </foreach>
        </if>
        AND is_deleted = 0
        order by id asc limit 500
    </select>

    <update id="updateNodeAddress">
        UPDATE
        schedule_job
        set node_address = #{nodeAddress}
        where job_id IN
        <foreach item="jobId" index="index" collection="jobIds" open="(" separator="," close=")">
            #{jobId}
        </foreach>
    </update>

    <select id="listExecJobByCycTimeTypeAddress" resultType="ScheduleJob">
        SELECT
        <include refid="select_content_fragment"/>
        ,bj.job_execute_order
        FROM schedule_job bj
        WHERE
        node_address = #{nodeAddress}
        <if test="isEq">
            AND job_execute_order >= #{startId}
        </if>
        <if test="!isEq">
            AND job_execute_order > #{startId}
        </if>
        <if test="scheduleType != null">
            AND type = #{scheduleType}
        </if>
        <if test="cycStartTime != null">
            AND cyc_time &gt;= #{cycStartTime}
        </if>
        <if test="cycEndTime != null">
            AND cyc_time &lt; #{cycEndTime}
        </if>
        <if test="lastTime != null">
            AND gmt_modified &gt;= #{lastTime}
        </if>
        <if test="isRestart != null">
            AND is_restart = #{isRestart}
        </if>
        AND (status = 0 or ((status = 10 or status=4) and task_type in (10, 14,27)))
        AND is_deleted = 0
        AND `phase_status` = #{phaseStatus}
        order by job_execute_order asc limit 500
    </select>

    <select id="listExecJobByJobIds" resultType="ScheduleJob">
        SELECT
        <include refid="select_content_fragment"/>
        FROM schedule_job bj
        WHERE
        is_deleted = 0
        <if test="nodeAddress != null">
            AND node_address = #{nodeAddress}
        </if>
        <if test="isRestart != null">
            AND is_restart = #{isRestart}
        </if>
        AND (status = 0 or ((status = 10 or status=4) and task_type in (10, 14,27)))
        AND `phase_status` = #{phaseStatus}
        <if test="jobIds != null and jobIds.size > 0">
            AND bj.job_id IN
            <foreach collection="jobIds" item="jobId" index="index" open="(" separator="," close=")">
                #{jobId}
            </foreach>
        </if>
    </select>

    <update id="updateStatusByJobId">
        UPDATE schedule_job
        <set>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="versionId != null">
                version_id = #{versionId},
            </if>
            <if test="execStartTime != null">
                exec_start_time = #{execStartTime},
            </if>
            <if test="execEndTime != null">
                exec_end_time = #{execEndTime},
            </if>
            gmt_modified = now()
        </set>
        WHERE job_id = #{jobId}
        AND is_deleted=0
    </update>

    <update id="jobFail">
        update schedule_job set exec_start_time = IFNULL(exec_start_time,now()), exec_end_time=now(), exec_time=timestampdiff(SECOND, exec_start_time, now()),gmt_modified=now(),status=#{status}  where job_id=#{jobId};
    </update>

    <select id="getRdosJobByJobIds" resultType="ScheduleJob">
        select id,job_id, engine_job_id,application_id,status,exec_start_time,exec_end_time,exec_time,retry_num,gmt_create,gmt_modified,is_deleted,compute_type,cyc_time
        from schedule_job
        where job_id IN
        <foreach item="jobId" index="index" collection="jobIds" open="(" separator="," close=")">
            #{jobId}
        </foreach>
        and is_deleted=0;
    </select>

    <select id="getByName" parameterType="java.lang.String" resultType="ScheduleJob">
        select <include refid="select_filed_all"/> from schedule_job where job_name = #{jobName} and is_deleted=0 LIMIT 1;
    </select>
    <select id="listCycleJob" resultType="com.dtstack.engine.domain.ScheduleJob">
        SELECT
        <include refid="select_content_fragment"/>
        ,bj.job_execute_order
        FROM schedule_job bj
        WHERE
        node_address = #{nodeAddress}
        <if test="isEq">
            AND job_execute_order >= #{startId}
        </if>
        <if test="!isEq">
            AND job_execute_order > #{startId}
        </if>
        <if test="scheduleType != null">
            AND type = #{scheduleType}
        </if>
        <if test="lastTime != null">
            AND gmt_modified &gt;= #{lastTime}
        </if>
        AND status = 0
        AND is_deleted = 0
        AND `phase_status` = #{phaseStatus}
        order by job_execute_order asc limit 500
    </select>

    <update id="updateJobStatusByJobIds">
        update schedule_job
        set gmt_modified=now(), status=#{status}
        where job_id IN
        <foreach item="jobId" index="index" collection="jobIds" open="(" separator="," close=")">
            #{jobId}
        </foreach>
        and is_deleted=0;
    </update>

    <update id="updatePhaseStatusById">
        update `schedule_job`
        set `phase_status`=#{update}
        where `id` = #{id}
        and `phase_status` = #{original}
        and `is_deleted`=0;
    </update>

    <update id="updateListPhaseStatus">
        update `schedule_job`
        set `phase_status`=#{update}
        where job_id IN
        <foreach item="jobId" index="index" collection="jobIds" open="(" separator="," close=")">
            #{jobId}
        </foreach>
        and `is_deleted`=0;
    </update>

</mapper>
