<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>聚合函数 | 数栈帮助文档</title>
    <link rel="canonical" href="https://insight.dtstack.com/dtinsight-sparksql/v1.0/Functions/AllFunction - 副本.html">
    <link rel="stylesheet" href="../../../_/css/site.css">
    <link rel="schema.dcterms" href="https://purl.org/dc/terms/">
    <meta name="dcterms.subject" content="dtinsight-sparksql">
    <meta name="dcterms.identifier" content="v1.0">
    <meta name="generator" content="Antora 2.0.0">
    <link rel="icon" href="../../../_/img/favicon.ico" type="image/x-icon">
  </head>
  <body class="article">
<header class="header">
  <nav class="navbar" id="topbar">
    <div class="container">
      <div class="navbar-brand">
        <a class="navbar-item" href="https://insight.dtstack.com"><img src="../../../_/img/logo.svg" alt="dtinsight"></a>
        <button class="navbar-burger" data-target="topbar-menu">
          <span></span>
          <span></span>
          <span></span>
        </button>
      </div>
      <div id="topbar-menu" class="navbar-menu">
        <div class="navbar-start">
          <div class="navbar-item has-dropdown">
            <a class="navbar-link" href="https://insight.dtstack.com">Document Overview</a>
            <div class="navbar-dropdown explore">
              <div class="cols">
                <ul>
                  <li><a href="../../../dtinsight-productsystem/v1.0/ProductSystem.html">数据中台产品体系</a></li>
                  <li><a href="../../../dtinsight-batch/v3.0/Summary.html">离线计算v3.0</a></li>
                  <li><a href="../../../dtinsight-stream/v3.0/Summary.html">流计算v3.0</a></li>
                  <li><a href="../../../dtinsight-analytic/v1.0/Summary.html">分析引擎v1.0</a></li>
                </ul>
                <ul>
                  <li><a href="../../../dtinsight-api/v3.0/01_DTinsightAPIHelp_Summary.html">数据APIv3.0</a></li>
                  <li><a href="../../../dtinsight-valid/v3.0/Summary.html">数据质量v3.0</a></li>
                  <li><a href="../Summary.html">SparkSQL Guide v1.0</a></li>
                  <!--li><a href="#">控制台</a></li-->
                </ul>
              </div>
            </div>
          </div>
          <div class="navbar-item has-dropdown">
            <a class="navbar-link component" href="../Summary.html"><span class="title">SparkSQL手册</span> <span class="version">v1.0</span></a>
            <div class="navbar-dropdown versions">
              <div class="cols">
                <ul>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </nav>
</header>
<div class="body container">
<nav class="nav">
<div class="nav-menu">
<ul class="nav-list">
  <li class="nav-item is-active" data-depth="0">
<ul class="nav-list">
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../Summary.html">概览</a>
    </span>
  </li>
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../FileFormats.html">文件格式</a>
    </span>
  </li>
</ul>
  </li>
  <li class="nav-item is-active" data-depth="0">
    <span class="nav-line">
    <button class="nav-toggle"></button>
    <span class="nav-text">数据类型</span>
    </span>
<ul class="nav-list">
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../DataTypes/Overview.html">概览</a>
    </span>
  </li>
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../DataTypes/ImplicitConversion.html">隐式转换</a>
    </span>
  </li>
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../DataTypes/ColumnTypes.html">字段类型</a>
    </span>
  </li>
</ul>
  </li>
  <li class="nav-item is-active" data-depth="0">
    <span class="nav-line">
    <button class="nav-toggle"></button>
    <span class="nav-text">LanguageManual</span>
    </span>
<ul class="nav-list">
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../LanguageManual/Index.html">语法索引</a>
    </span>
  </li>
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../LanguageManual/AlterTable.html">Alter Table</a>
    </span>
  </li>
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../LanguageManual/AlterTablePartitions.html">Alter Table Partitions</a>
    </span>
  </li>
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../LanguageManual/CreateTable.html">Create Table</a>
    </span>
  </li>
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../LanguageManual/DescribeTable.html">Describe Table</a>
    </span>
  </li>
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../LanguageManual/DropTable.html">Drop Table</a>
    </span>
  </li>
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../LanguageManual/Explain.html">Explain</a>
    </span>
  </li>
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../LanguageManual/Insert.html">Insert</a>
    </span>
  </li>
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../LanguageManual/Select.html">Select</a>
    </span>
  </li>
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../LanguageManual/Set.html">Set</a>
    </span>
  </li>
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../LanguageManual/ShowColumns.html">Show Columns</a>
    </span>
  </li>
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../LanguageManual/ShowCreateTable.html">Show Create Table</a>
    </span>
  </li>
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../LanguageManual/ShowPartitions.html">Show Partitions</a>
    </span>
  </li>
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../LanguageManual/ShowTables.html">Show Tables</a>
    </span>
  </li>
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../LanguageManual/TruncateTable.html">Truncate Table</a>
    </span>
  </li>
</ul>
  </li>
  <li class="nav-item is-active" data-depth="0">
    <span class="nav-line">
    <button class="nav-toggle"></button>
    <span class="nav-text">Functions</span>
    </span>
<ul class="nav-list">
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="AllFunction.html">全部函数</a>
    </span>
  </li>
</ul>
  </li>
  <li class="nav-item is-active" data-depth="0">
<ul class="nav-list">
  <li class="nav-item" data-depth="1">
    <span class="nav-line">
    <a class="nav-link" href="../HiveCompatibility/HiveCompatibility.html">Hive兼容性说明</a>
    </span>
  </li>
</ul>
  </li>
</ul>
</div>
</nav>
<aside class="toc sidebar">
  <div class="toc-menu"></div>
</aside>
<main class="article" data-ceiling="topbar">
  <div class="article-header">
<button class="nav-control"></button>
<nav class="crumbs" aria-label="breadcrumbs">
  <ul>
    <li class="crumb"><a href="../Summary.html">SparkSQL手册</a></li>
    <li class="crumb"><a href="AllFunction - 副本.html">聚合函数</a></li>
  </ul>
</nav>
  </div>
<article class="doc">
<h1 class="page">聚合函数</h1>
<div class="sect1">
<h2 id="_approx_count_distinct"><a class="anchor" href="#_approx_count_distinct"></a>approx_count_distinct</h2>
<div class="sectionbody">
<div class="paragraph">
<p>approx_count_distinct(expr[, relativeSD]) - 返回HyperLogLog++的估计基数。relativeSD定义允许的最大估计误差。</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_assert_true"><a class="anchor" href="#_assert_true"></a>assert_true</h2>
<div class="sectionbody">
<div class="paragraph">
<p>assert_true(expr) - 当expr不是true时，抛出java.lang.RuntimeException异常，为true时，不输出任何内容</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT assert_true(0 &lt; 1);
-- 输出结果：</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_avg"><a class="anchor" href="#_avg"></a>avg</h2>
<div class="sectionbody">
<div class="paragraph">
<p>avg(expr) - 一组数值中的平均值</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_base64"><a class="anchor" href="#_base64"></a>base64</h2>
<div class="sectionbody">
<div class="paragraph">
<p>base64(bin) -从二进制bin转换为base 64字符串。</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT base64('Spark SQL');
-- 输出结果：U3BhcmsgU1FM</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_bigint"><a class="anchor" href="#_bigint"></a>bigint</h2>
<div class="sectionbody">
<div class="paragraph">
<p>bigint(expr) - 将值expr转换为bigint类型。</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_binary"><a class="anchor" href="#_binary"></a>binary</h2>
<div class="sectionbody">
<div class="paragraph">
<p>binary(expr) - 将expr的类型转换（Cast）为Binary类型</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_boolean"><a class="anchor" href="#_boolean"></a>boolean</h2>
<div class="sectionbody">
<div class="paragraph">
<p>boolean(expr) - 将expr的类型转换（Cast）为boolean类型</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT boolean('wo   ');
-- 输出结果：NULL

SELECT boolean(-1);
-- 输出结果：NULL

SELECT boolean(1);
-- 输出结果：true

SELECT boolean('1');
-- 输出结果：true</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_coalesce"><a class="anchor" href="#_coalesce"></a>coalesce</h2>
<div class="sectionbody">
<div class="paragraph">
<p>coalesce(expr1, expr2, &#8230;&#8203;) - 返回第一个非NULL的参数，若均为NULL，则返回为NULL</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT coalesce(NULL, 1, NULL);
-- 输出结果：1</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="collect_list"><a class="anchor" href="#collect_list"></a>collect_list</h2>
<div class="sectionbody">
<div class="paragraph">
<p>collect_list(expr) - 返回expr中的元素，包含重复值，返回格式为List，注意本函数需作用于某个字段，不能在页面直接select</p>
</div>
<div class="paragraph">
<p>不包含重复值的函数，请参考<a href="#collect_set">collect_set</a></p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">-- t表有2个字段，分别为id、name
-- t表有3条数据，分别为
-- 1,'a'
-- 2,'b'
-- 2,'c'

SELECT collect_list(t.id) from t
-- 输出结果：[1,2,2]

SELECT collect_list(t.name) from t
-- 输出结果：['a','b','c']</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="collect_set"><a class="anchor" href="#collect_set"></a>collect_set</h2>
<div class="sectionbody">
<div class="paragraph">
<p>collect_set(expr) - 参考<a href="#collect_list">collect_list</a>，collect_set与collect_list的区别在于，collect_set不包含重复值</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_concat"><a class="anchor" href="#_concat"></a>concat</h2>
<div class="sectionbody">
<div class="paragraph">
<p>concat(col1, col2, &#8230;&#8203;, colN) - 将col1, col2, &#8230;&#8203;, colN之间的字符串连接起来</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT concat('Spark', 2);
-- 输出结果：Spark2</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_concat_ws"><a class="anchor" href="#_concat_ws"></a>concat_ws</h2>
<div class="sectionbody">
<div class="paragraph">
<p>concat_ws(sep, [str | array(str)]+) - 返回由sep分隔的字符串的串联。</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT concat_ws(' ', 'Spark', 'SQL');
-- 输出结果：Spark SQL</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_corr"><a class="anchor" href="#_corr"></a>corr</h2>
<div class="sectionbody">
<div class="paragraph">
<p>corr(expr1, expr2) - 一组数字对之间的Pearson相关系数。</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_count"><a class="anchor" href="#_count"></a>count</h2>
<div class="sectionbody">
<div class="paragraph">
<p>count(*) - 总行数，包括值为NULL的行</p>
</div>
<div class="paragraph">
<p>count(expr[, expr&#8230;&#8203;]) - 总行数，不包括值为NULL的行</p>
</div>
<div class="paragraph">
<p>count(DISTINCT expr[, expr&#8230;&#8203;]) - 总行数，非NULL的，唯一值的行数</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_covar_pop"><a class="anchor" href="#_covar_pop"></a>covar_pop</h2>
<div class="sectionbody">
<div class="paragraph">
<p>covar_pop(expr1, expr2) - 返回一组数字对的总体协方差。</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_covar_samp"><a class="anchor" href="#_covar_samp"></a>covar_samp</h2>
<div class="sectionbody">
<div class="paragraph">
<p>covar_samp(expr1, expr2) - 返回一组数字对的样本协方差。</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_crc32"><a class="anchor" href="#_crc32"></a>crc32</h2>
<div class="sectionbody">
<div class="paragraph">
<p>crc32(expr) - 返回expr的CRC值（循环冗余校验值），以bigint返回</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT crc32('Spark');
-- 输出结果：1557323817</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_cube"><a class="anchor" href="#_cube"></a>cube</h2>
<div class="sectionbody">
<div class="paragraph">
<p>【分析函数】</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_cume_dist"><a class="anchor" href="#_cume_dist"></a>cume_dist</h2>
<div class="sectionbody">
<div class="paragraph">
<p>【分析函数】</p>
</div>
<div class="paragraph">
<p>cume_dist() - Computes the position of a value relative to all values in the partition.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_current_database"><a class="anchor" href="#_current_database"></a>current_database</h2>
<div class="sectionbody">
<div class="paragraph">
<p>current_database() - 当前所在的数据库名</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT current_database();
-- 输出结果：default</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_current_date"><a class="anchor" href="#_current_date"></a>current_date</h2>
<div class="sectionbody">
<div class="paragraph">
<p>current_date() - 当前日期，格式为2008-01-01</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_current_timestamp"><a class="anchor" href="#_current_timestamp"></a>current_timestamp</h2>
<div class="sectionbody">
<div class="paragraph">
<p>current_timestamp() - 当前时间，格式为UNIX时间戳，单位为毫秒</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_date"><a class="anchor" href="#_date"></a>date</h2>
<div class="sectionbody">
<div class="paragraph">
<p>date(expr) - 将expr转换（Cast）为date类型</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_date_add"><a class="anchor" href="#_date_add"></a>date_add</h2>
<div class="sectionbody">
<div class="paragraph">
<p>date_add(start_date, num_days) - 日期计算函数，从start_date开始，增加num_days天，返回date</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT date_add('2016-07-30', 1);
-- 输出结果：2016-07-31</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_date_format"><a class="anchor" href="#_date_format"></a>date_format</h2>
<div class="sectionbody">
<div class="paragraph">
<p>date_format(timestamp, fmt) - 将timestamp转换为fmt指定的日期格式，返回字符串</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT date_format('2016-04-08', 'y');
-- 输出结果：2016</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_date_sub"><a class="anchor" href="#_date_sub"></a>date_sub</h2>
<div class="sectionbody">
<div class="paragraph">
<p>date_sub(start_date, num_days) - 日期计算函数，从start_date开始，减num_days天</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT date_sub('2016-07-30', 1);
-- 输出结果：2016-07-29</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_datediff"><a class="anchor" href="#_datediff"></a>datediff</h2>
<div class="sectionbody">
<div class="paragraph">
<p>datediff(endDate, startDate) -  日期差，endDate减去startDate，得出相差多少天</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT datediff('2009-07-31', '2009-07-30');
-- 输出结果：1

SELECT datediff('2009-07-30', '2009-07-31');
-- 输出结果：-1</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="day"><a class="anchor" href="#day"></a>day</h2>
<div class="sectionbody">
<div class="paragraph">
<p>day(date) - date/timestamp中的日部分，与<a href="#dayofmonth">dayofmonth</a>函数相同</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT day('2009-07-30');
-- 输出结果：30</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="dayofmonth"><a class="anchor" href="#dayofmonth"></a>dayofmonth</h2>
<div class="sectionbody">
<div class="paragraph">
<p>dayofmonth(date) - date/timestamp中的日部分，与<a href="#day">day</a>函数相同</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT dayofmonth('2009-07-30');
-- 输出结果：30</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_dayofyear"><a class="anchor" href="#_dayofyear"></a>dayofyear</h2>
<div class="sectionbody">
<div class="paragraph">
<p>dayofyear(date) - date/timestamp中的日期，为所在年的第多少天</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT dayofyear('2016-04-09');
-- 输出结果：100</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_decimal"><a class="anchor" href="#_decimal"></a>decimal</h2>
<div class="sectionbody">
<div class="paragraph">
<p>decimal(expr) - 将expr转换（Cast）为decimal类型</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_decode"><a class="anchor" href="#_decode"></a>decode</h2>
<div class="sectionbody">
<div class="paragraph">
<p>decode(bin, charset) - 使用charset字符集解码bin。</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT decode(encode('abc', 'utf-8'), 'utf-8');
-- 输出结果：abc</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_dense_rank"><a class="anchor" href="#_dense_rank"></a>dense_rank</h2>
<div class="sectionbody">
<div class="paragraph">
<p>【窗口函数】</p>
</div>
<div class="paragraph">
<p>dense_rank() - Computes the rank of a value in a group of values. The result is one plus the previously assigned rank value. Unlike the function rank, dense_rank will not produce gaps in the ranking sequence.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_double"><a class="anchor" href="#_double"></a>double</h2>
<div class="sectionbody">
<div class="paragraph">
<p>double(expr) - 将expr转换（Cast）为double类型</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_elt"><a class="anchor" href="#_elt"></a>elt</h2>
<div class="sectionbody">
<div class="paragraph">
<p>elt(n, input1, input2, &#8230;&#8203;) - 返回第n个input，例如：当n为2时返回input2。</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT elt(1, 'scala', 'java');
-- 输出结果：scala</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_encode"><a class="anchor" href="#_encode"></a>encode</h2>
<div class="sectionbody">
<div class="paragraph">
<p>encode(str, charset) - 使用charset字符集对str编码</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT encode('abc', 'utf-8');
-- 输出结果：YWJj</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="explode"><a class="anchor" href="#explode"></a>explode</h2>
<div class="sectionbody">
<div class="paragraph">
<p>explode(expr) - 将array拆分为多行，或将map拆分为多个行和列</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT explode(array(10, 20));
-- 输出结果：10
--          20</code></pre>
</div>
</div>
<div class="paragraph">
<p>tags：UDTF</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_expm1"><a class="anchor" href="#_expm1"></a>expm1</h2>
<div class="sectionbody">
<div class="paragraph">
<p>expm1(expr) - e的expr次幂减1，即exp(expr)-1</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT expm1(0);
-- 输出结果：0</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_find_in_set"><a class="anchor" href="#_find_in_set"></a>find_in_set</h2>
<div class="sectionbody">
<div class="paragraph">
<p>find_in_set(str, str_array) - 返回str在str_array中的位置（从1开始），str_array是包含英文逗号的字符串。若未找到，或者str中包含英文逗号，则返回0</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT find_in_set('ab','abc,b,ab,c,def');
-- 输出结果：3</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_first"><a class="anchor" href="#_first"></a>first</h2>
<div class="sectionbody">
<div class="paragraph">
<p>【窗口函数】</p>
</div>
<div class="paragraph">
<p>first(expr[, isIgnoreNull]) - Returns the first value of expr for a group of rows. If isIgnoreNull is true, returns only non-null values.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_first_value"><a class="anchor" href="#_first_value"></a>first_value</h2>
<div class="sectionbody">
<div class="paragraph">
<p>【窗口函数】
first_value(expr[, isIgnoreNull]) - Returns the first value of expr for a group of rows. If isIgnoreNull is true, returns only non-null values.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_float"><a class="anchor" href="#_float"></a>float</h2>
<div class="sectionbody">
<div class="paragraph">
<p>float(expr) - 将expr转换（Cast）为float类型</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_format_number"><a class="anchor" href="#_format_number"></a>format_number</h2>
<div class="sectionbody">
<div class="paragraph">
<p>format_number(expr1, expr2) - 将数字expr1格式化为'＃,<mark><mark>,</mark></mark>.##'，expr2是小数位。如果expr2为0，则结果没有小数点或小数部分。expr2也可以是用户指定的格式，应该像MySQL的FORMAT一样</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT format_number(12332.123456, 4);
-- 输出结果：12,332.1235</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_format_string"><a class="anchor" href="#_format_string"></a>format_string</h2>
<div class="sectionbody">
<div class="paragraph">
<p>format_string(strfmt, obj, &#8230;&#8203;) - 返回printf的格式化效果字符串</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT format_string("Hello World %d %s", 100, "days");
-- 输出结果：Hello World 100 days</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_from_unixtime"><a class="anchor" href="#_from_unixtime"></a>from_unixtime</h2>
<div class="sectionbody">
<div class="paragraph">
<p>from_unixtime(unix_time, format) - 按照format指定的格式，返回unix_time对应的时间</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT from_unixtime(0, 'yyyy-MM-dd HH:mm:ss');
-- 输出结果：1970-01-01 08:00:00</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_from_utc_timestamp"><a class="anchor" href="#_from_utc_timestamp"></a>from_utc_timestamp</h2>
<div class="sectionbody">
<div class="paragraph">
<p>from_utc_timestamp(timestamp, timezone) - 给定时间戳如'2017-07-14 02:40:00.0'，将其解释为UTC时间，并将该时间展现为给定时区中的时间戳。例如，'GMT + 1&#8217;将产生'2017-07-14 03:40:00.0'</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT from_utc_timestamp('2016-08-31', 'Asia/Seoul');
-- 输出结果：1472605200000</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_get_json_object"><a class="anchor" href="#_get_json_object"></a>get_json_object</h2>
<div class="sectionbody">
<div class="paragraph">
<p>get_json_object(json_txt, path) - 从path中提取json对象的value，支持json嵌套</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT get_json_object('{"a":"b"}', '$.a');
-- 输出结果：b</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_grouping"><a class="anchor" href="#_grouping"></a>grouping</h2>
<div class="sectionbody">
<div class="paragraph">
<p>【分析函数】</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_grouping_id"><a class="anchor" href="#_grouping_id"></a>grouping_id</h2>
<div class="sectionbody">
<div class="paragraph">
<p>【分析函数】</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_hash"><a class="anchor" href="#_hash"></a>hash</h2>
<div class="sectionbody">
<div class="paragraph">
<p>hash(expr1, expr2, &#8230;&#8203;) - 返回所有参数的一个hash值</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT hash('Spark', array(123), 2);
-- 输出结果：-1321691492</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_hour"><a class="anchor" href="#_hour"></a>hour</h2>
<div class="sectionbody">
<div class="paragraph">
<p>hour(timestamp) - 返回string/timestamp中的小时部分</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT hour('2009-07-30 12:58:59');
-- 输出结果：12</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_hypot"><a class="anchor" href="#_hypot"></a>hypot</h2>
<div class="sectionbody">
<div class="paragraph">
<p>hypot(expr1, expr2) - sqrt(expr1^2 + expr2^2)，类似勾股定理，已知直角三角形的两条直角边，求第三条边的边长</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT hypot(3, 4);
-- 输出结果：5</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_if"><a class="anchor" href="#_if"></a>if</h2>
<div class="sectionbody">
<div class="paragraph">
<p>if(expr1, expr2, expr3) - 若expr1为true，则返回expr2，否则返回expr3</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT if(1 &lt; 2, 'a', 'b');
-- 输出结果：a</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_ifnull"><a class="anchor" href="#_ifnull"></a>ifnull</h2>
<div class="sectionbody">
<div class="paragraph">
<p>ifnull(expr1, expr2) - 若expr为null，则返回expr2，否则返回expr1</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT ifnull(NULL, array('2'));
-- 输出结果：["2"]</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_initcap"><a class="anchor" href="#_initcap"></a>initcap</h2>
<div class="sectionbody">
<div class="paragraph">
<p>initcap(str) - 以大写形式返回每个单词的第一个字母的str。所有其他字母均为小写。单词由空格分隔</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT initcap('sPark sql');
-- 输出结果：Spark Sql</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_inline"><a class="anchor" href="#_inline"></a>inline</h2>
<div class="sectionbody">
<div class="paragraph">
<p>inline(expr) - 将一组由struct组合的array，分解为多行、多列</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT inline(array(struct(1, 'a'), struct(2, 'b')));
-- 输出结果：1  a
--          2  b</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_input_file_name"><a class="anchor" href="#_input_file_name"></a>input_file_name</h2>
<div class="sectionbody">
<div class="paragraph">
<p>input_file_name() - 返回正在读取的文件的名称，如果不可用，则返回空字符串</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_instr"><a class="anchor" href="#_instr"></a>instr</h2>
<div class="sectionbody">
<div class="paragraph">
<p>instr(str, substr) - 返回str中第一次出现substr的位置（从1开始）</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT instr('SparkSQL', 'SQL');
-- 输出结果：6</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_int"><a class="anchor" href="#_int"></a>int</h2>
<div class="sectionbody">
<div class="paragraph">
<p>int(expr) - 将expr强制转换（Cast）为int类型</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_isnan"><a class="anchor" href="#_isnan"></a>isnan</h2>
<div class="sectionbody">
<div class="paragraph">
<p>isnan(expr) - 若expr为Nan，返回true，否则返回false</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT isnan(cast('NaN' as double));
-- 输出结果：true</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_isnotnull"><a class="anchor" href="#_isnotnull"></a>isnotnull</h2>
<div class="sectionbody">
<div class="paragraph">
<p>isnotnull(expr) - 如果expr不是null，返回true，否则返回false</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT isnotnull(1);
-- 输出结果：true</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_isnull"><a class="anchor" href="#_isnull"></a>isnull</h2>
<div class="sectionbody">
<div class="paragraph">
<p>isnull(expr) - expr为null，返回true，否则返回false</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT isnull(1);
-- 输出结果：false</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_java_method"><a class="anchor" href="#_java_method"></a>java_method</h2>
<div class="sectionbody">
<div class="paragraph">
<p>java_method(class, method[, arg1[, arg2 ..]]) - 用反射（reflection）调用一个Java方法（method）</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT java_method('java.util.UUID', 'randomUUID');
-- 输出结果：c33fb387-8500-4bfa-81d2-6e0e3e930df2

SELECT java_method('java.util.UUID', 'fromString', 'a5cf6c42-0c85-418f-af6c-3e4e5b1328f2');
-- 输出结果：a5cf6c42-0c85-418f-af6c-3e4e5b1328f2</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_json_tuple"><a class="anchor" href="#_json_tuple"></a>json_tuple</h2>
<div class="sectionbody">
<div class="paragraph">
<p>【json处理】</p>
</div>
<div class="paragraph">
<p>json_tuple(jsonStr, p1, p2, &#8230;&#8203;, pn) - 类似get_json_object()一样，但json_tuple函数可以输入多个参数，返回一个元组（tuple）。 所有输入参数和输出列类型都是字符串。</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT json_tuple('{"a":1, "b":2}', 'a', 'b');
-- 输出结果：1  2</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_kurtosis"><a class="anchor" href="#_kurtosis"></a>kurtosis</h2>
<div class="sectionbody">
<div class="paragraph">
<p>【聚合函数】
kurtosis(expr) - 返回expr的峰度值</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_lag"><a class="anchor" href="#_lag"></a>lag</h2>
<div class="sectionbody">
<div class="paragraph">
<p>【窗口函数】</p>
</div>
<div class="paragraph">
<p>lag(input[, offset[, default]]) -
Returns the value of input at the offsetth row before the current row in the window. The default value of offset is 1 and the default value of default is null. If the value of input at the offsetth row is null, null is returned. If there is no such offset row (e.g., when the offset is 1, the first row of the window does not have any previous row), default is returned.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_last"><a class="anchor" href="#_last"></a>last</h2>
<div class="sectionbody">
<div class="paragraph">
<p>【窗口函数】</p>
</div>
<div class="paragraph">
<p>last(expr[, isIgnoreNull]) - Returns the last value of expr for a group of rows. If isIgnoreNull is true, returns only non-null values.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_last_day"><a class="anchor" href="#_last_day"></a>last_day</h2>
<div class="sectionbody">
<div class="paragraph">
<p>last_day(date) - 返回date所在月份的最后一天，返回date格式</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT last_day('2009-01-12');
-- 输出结果：2009-01-31</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_last_value"><a class="anchor" href="#_last_value"></a>last_value</h2>
<div class="sectionbody">
<div class="paragraph">
<p>【窗口函数】
last_value(expr[, isIgnoreNull]) - Returns the last value of expr for a group of rows. If isIgnoreNull is true, returns only non-null values.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_lcase"><a class="anchor" href="#_lcase"></a>lcase</h2>
<div class="sectionbody">
<div class="paragraph">
<p>lcase(str) - 将str转为小写字母</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT lcase('SparkSql');
-- 输出结果：sparksql</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_lead"><a class="anchor" href="#_lead"></a>lead</h2>
<div class="sectionbody">
<div class="paragraph">
<p>【分析函数】</p>
</div>
<div class="paragraph">
<p>lead(input[, offset[, default]]) - Returns the value of input at the offsetth row after the current row in the window. The default value of offset is 1 and the default value of default is null. If the value of input at the offsetth row is null, null is returned. If there is no such an offset row (e.g., when the offset is 1, the last row of the window does not have any subsequent row), default is returned.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_length"><a class="anchor" href="#_length"></a>length</h2>
<div class="sectionbody">
<div class="paragraph">
<p>length(expr) - 统计string类型的字符个数，或者binary类型的字节数（bytes）。string类型数据，长度中包括了尾随的空格，binary类型的数据，长度中包括了二进制零。</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT length('Spark SQL ');
-- 输出结果：10</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_levenshtein"><a class="anchor" href="#_levenshtein"></a>levenshtein</h2>
<div class="sectionbody">
<div class="paragraph">
<p>levenshtein(str1, str2) - 返回两个给定字符串之间的Levenshtein距离。</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT levenshtein('kitten', 'sitting');
-- 输出结果：3</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_like"><a class="anchor" href="#_like"></a>like</h2>
<div class="sectionbody">
<div class="paragraph">
<p>str like pattern - 如果str匹配pattern，则返回true，如果任何参数为null，则返回null，否则返回false</p>
</div>
<div class="paragraph">
<p><strong>str</strong> - string类型的字符串</p>
</div>
<div class="paragraph">
<p><strong>pattern</strong> - 字符串表达式。 该模式是字面上匹配的字符串，但以下特殊符号除外：</p>
</div>
<div class="paragraph">
<p><code>_</code> 匹配输入中的任何一个字符（类似posix正则表达式中的 <code>.</code> ）</p>
</div>
<div class="paragraph">
<p><code>%</code> 匹配输入中的零个或多个字符（类似posix正则表达式中的 <code>.*</code> ）</p>
</div>
<div class="paragraph">
<p><code>\</code> 是转义字符，如果转义字符先于一个特殊符号或另一个转义字符，后续字符按字面匹配</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT '%SystemDrive%Users_John' like '\%SystemDrive\%Users\_John'
-- 输出结果：true</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_locate"><a class="anchor" href="#_locate"></a>locate</h2>
<div class="sectionbody">
<div class="paragraph">
<p>locate(substr, str[, pos]) - 在pos位置之后，str中第一次出现substr的位置（从1开始）</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT locate('bar', 'foobarbar');
-- 输出结果：4

SELECT locate('bar', 'foobarbar', 5);
-- 输出结果：7</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_lower"><a class="anchor" href="#_lower"></a>lower</h2>
<div class="sectionbody">
<div class="paragraph">
<p>lower(str) - 将str中的字符改为小写</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT lower('SparkSql');
-- 输出结果：sparksql</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_lpad"><a class="anchor" href="#_lpad"></a>lpad</h2>
<div class="sectionbody">
<div class="paragraph">
<p>lpad(str, len, pad) - 将str左边填充pad并返回，长度为len，如果str长于len，则返回值将缩短为len个字符</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT lpad('hi', 5, '??');
-- 输出结果：???hi

SELECT lpad('hi', 1, '??');
-- 输出结果：h</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_ltrim"><a class="anchor" href="#_ltrim"></a>ltrim</h2>
<div class="sectionbody">
<div class="paragraph">
<p>ltrim(str) - 去除str左侧的空格</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT ltrim('    SparkSQL   ');
-- 输出结果：SparkSQL</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_max"><a class="anchor" href="#_max"></a>max</h2>
<div class="sectionbody">
<div class="paragraph">
<p>max(expr) - 返回expr的最大值</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_md5"><a class="anchor" href="#_md5"></a>md5</h2>
<div class="sectionbody">
<div class="paragraph">
<p>md5(expr) - 返回expr的MD5值</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT md5('Spark');
-- 输出结果：8cde774d6f7333752ed72cacddb05126</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_mean"><a class="anchor" href="#_mean"></a>mean</h2>
<div class="sectionbody">
<div class="paragraph">
<p>mean(expr) - 计算expr的平均值</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_min"><a class="anchor" href="#_min"></a>min</h2>
<div class="sectionbody">
<div class="paragraph">
<p>min(expr) - 计算expr的最小值</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_minute"><a class="anchor" href="#_minute"></a>minute</h2>
<div class="sectionbody">
<div class="paragraph">
<p>minute(timestamp) - string/timestamp中的分钟部分</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT minute('2009-07-30 12:58:59');
-- 输出结果：58</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_month"><a class="anchor" href="#_month"></a>month</h2>
<div class="sectionbody">
<div class="paragraph">
<p>month(date) - 返回date/timestamp中的月部分</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT month('2016-07-30');
-- 输出结果：7</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_months_between"><a class="anchor" href="#_months_between"></a>months_between</h2>
<div class="sectionbody">
<div class="paragraph">
<p>months_between(timestamp1, timestamp2[, roundOff]) - 如果timestamp1晚于timestamp2，则结果为正。如果timestamp1和timestamp2在一个月的同一天，或者两者都是一个月的最后一天，则忽略一天中的时间。否则，差异将根据每月31天计算，并四舍五入为8位</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT months_between('1997-02-28 10:30:00', '1996-10-30');
-- 输出结果：3.94959677</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_nanvl"><a class="anchor" href="#_nanvl"></a>nanvl</h2>
<div class="sectionbody">
<div class="paragraph">
<p>nanvl(expr1, expr2) - 若expr1不等于Nan，返回expr1，否则返回expr2</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT nanvl(cast('NaN' as double), 123);
-- 输出结果：123</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_next_day"><a class="anchor" href="#_next_day"></a>next_day</h2>
<div class="sectionbody">
<div class="paragraph">
<p>next_day(start_date, day_of_week) - 返回start_date之后，按day_of_week命名的第一个日期</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT next_day('2015-01-14', 'TU');
-- 输出结果：2015-01-20</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_now"><a class="anchor" href="#_now"></a>now</h2>
<div class="sectionbody">
<div class="paragraph">
<p>now() - 返回当前时间，格式为Unix时间戳</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_ntile"><a class="anchor" href="#_ntile"></a>ntile</h2>
<div class="sectionbody">
<div class="paragraph">
<p>【窗口函数】</p>
</div>
<div class="paragraph">
<p>ntile(n) - Divides the rows for each window partition into n buckets ranging from 1 to at most n.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_nullif"><a class="anchor" href="#_nullif"></a>nullif</h2>
<div class="sectionbody">
<div class="paragraph">
<p>nullif(expr1, expr2) - 如果expr1与expr2相等，返回null，否则返回expr1</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT nullif(2, 2);
-- 输出结果：NULL</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_nvl"><a class="anchor" href="#_nvl"></a>nvl</h2>
<div class="sectionbody">
<div class="paragraph">
<p>nvl(expr1, expr2) - 若expr2位null，则返回expr1，否则返回expr1</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT nvl(NULL, array('2'));
-- 输出结果：["2"]</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_nvl2"><a class="anchor" href="#_nvl2"></a>nvl2</h2>
<div class="sectionbody">
<div class="paragraph">
<p>nvl2(expr1, expr2, expr3) - 若expr1不为null，返回expr2，否则返回expr3</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT nvl2(NULL, 2, 1);
-- 输出结果：1</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_parse_url"><a class="anchor" href="#_parse_url"></a>parse_url</h2>
<div class="sectionbody">
<div class="paragraph">
<p>parse_url(url, partToExtract[, key]) - 从URL中提取一部分内容</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT parse_url('http://spark.apache.org/path?query=1', 'HOST')
-- 输出结果：spark.apache.org

SELECT parse_url('http://spark.apache.org/path?query=1', 'QUERY')
-- 输出结果：query=1

SELECT parse_url('http://spark.apache.org/path?query=1', 'QUERY', 'query')
-- 输出结果：1</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_percent_rank"><a class="anchor" href="#_percent_rank"></a>percent_rank</h2>
<div class="sectionbody">
<div class="paragraph">
<p>【分析窗口】
percent_rank() - 计算一组值中，某个值的百分比排名</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_percentile"><a class="anchor" href="#_percentile"></a>percentile</h2>
<div class="sectionbody">
<div class="paragraph">
<p>percentile(col, percentage [, frequency]) - 百分位函数，返回col字段，给定百分比的确切百分位数值，百分比值必须介于0.0和1.0之间，频率值应为正整数</p>
</div>
<div class="paragraph">
<p>percentile(col, array(percentage1 [, percentage2]&#8230;&#8203;) [, frequency]) - 百分位函数，返回col字段，给定一组百分比的确切百分位数值，每个百分比值必须介于0.0和1.0之间，频率值应为正整数</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_percentile_approx"><a class="anchor" href="#_percentile_approx"></a>percentile_approx</h2>
<div class="sectionbody">
<div class="paragraph">
<p>percentile_approx(col, percentage [, accuracy]) - Returns the approximate percentile value of numeric column col at the given percentage. The value of percentage must be between 0.0 and 1.0. The accuracy parameter (default: 10000) is a positive numeric literal which controls approximation accuracy at the cost of memory. Higher value of accuracy yields better accuracy, 1.0/accuracy is the relative error of the approximation. When percentage is an array, each value of the percentage array must be between 0.0 and 1.0. In this case, returns the approximate percentile array of column col at the given percentage array.</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT percentile_approx(10.0, array(0.5, 0.4, 0.1), 100);
-- 输出结果：[10.0,10.0,10.0]

SELECT percentile_approx(10.0, 0.5, 100);
-- 输出结果：10</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_posexplode"><a class="anchor" href="#_posexplode"></a>posexplode</h2>
<div class="sectionbody">
<div class="paragraph">
<p>posexplode(expr) - Separates the elements of array expr into multiple rows with positions, or the elements of map expr into multiple rows and columns with positions.</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT posexplode(array(10,20));
-- 输出结果：0  10
--          1  20</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_printf"><a class="anchor" href="#_printf"></a>printf</h2>
<div class="sectionbody">
<div class="paragraph">
<p>printf(strfmt, obj, &#8230;&#8203;) - 返回printf的格式化效果字符串</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT printf("Hello World %d %s", 100, "days");
-- 输出结果：Hello World 100 days</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_quarter"><a class="anchor" href="#_quarter"></a>quarter</h2>
<div class="sectionbody">
<div class="paragraph">
<p>【时间日期函数】
quarter(date) - 返回date所属的季度，从1~4</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT quarter('2016-08-31');
-- 输出结果：3</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_rank"><a class="anchor" href="#_rank"></a>rank</h2>
<div class="sectionbody">
<div class="paragraph">
<p>rank() - Computes the rank of a value in a group of values. The result is one plus the number of rows preceding or equal to the current row in the ordering of the partition. The values will produce gaps in the sequence.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_reflect"><a class="anchor" href="#_reflect"></a>reflect</h2>
<div class="sectionbody">
<div class="paragraph">
<p>reflect(class, method[, arg1[, arg2 ..]]) - Calls a method with reflection.</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT reflect('java.util.UUID', 'randomUUID');
-- 输出结果：c33fb387-8500-4bfa-81d2-6e0e3e930df2</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT reflect('java.util.UUID', 'fromString', 'a5cf6c42-0c85-418f-af6c-3e4e5b1328f2');
-- 输出结果：a5cf6c42-0c85-418f-af6c-3e4e5b1328f2</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_regexp_extract"><a class="anchor" href="#_regexp_extract"></a>regexp_extract</h2>
<div class="sectionbody">
<div class="paragraph">
<p>regexp_extract(str, regexp[, idx]) - 抽取与regexp相匹配的组，regexp为正则表达式</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT regexp_extract('100-200', '(\\d+)-(\\d+)', 1);
-- 输出结果：100</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_regexp_replace"><a class="anchor" href="#_regexp_replace"></a>regexp_replace</h2>
<div class="sectionbody">
<div class="paragraph">
<p>regexp_replace(str, regexp, rep) - 将str中，与正则表达式regexp匹配的所有子字符串，都替换为rep</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT regexp_replace('100-200', '(\\d+)', 'num');
-- 输出结果：num-num</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_repeat"><a class="anchor" href="#_repeat"></a>repeat</h2>
<div class="sectionbody">
<div class="paragraph">
<p>repeat(str, n) - 将给定的字符串重复n次</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT repeat('123', 2);
-- 输出结果：123123</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_reverse"><a class="anchor" href="#_reverse"></a>reverse</h2>
<div class="sectionbody">
<div class="paragraph">
<p>reverse(array) - 返回反向字符串，或者返回顺序相反的array</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT reverse('Spark SQL');
-- 输出结果：LQS krapS</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_rint"><a class="anchor" href="#_rint"></a>rint</h2>
<div class="sectionbody">
<div class="paragraph">
<p>rint(expr) - 返回与expr最接近的数学整数</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT rint(12.3456);
-- 输出结果：12</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_rlike"><a class="anchor" href="#_rlike"></a>rlike</h2>
<div class="sectionbody">
<div class="paragraph">
<p>str rlike regexp - 若str与regexp正则匹配，则返回true，否则返回false</p>
</div>
<div class="paragraph">
<p>Arguments:</p>
</div>
<div class="paragraph">
<p><strong>str</strong> - 字符串</p>
</div>
<div class="paragraph">
<p><strong>regexp</strong> - Java正则表达式格式的字符串</p>
</div>
<div class="paragraph">
<p>从Spark 2.0开始，字符串文字（包括正则表达式）在SQL解析器中未被转义。例如，要匹配“abc”，正则表达式可以是“^ abc $”。</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT '%SystemDrive%\Users\John' rlike '%SystemDrive%\Users.*'
-- 输出结果：true</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
可使用 <code>LIKE</code> 函数匹配简单的字符串模式
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_row_number"><a class="anchor" href="#_row_number"></a>row_number</h2>
<div class="sectionbody">
<div class="paragraph">
<p>【窗口函数】
row_number() - Assigns a unique, sequential number to each row, starting with one, according to the ordering of rows within the window partition.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_rpad"><a class="anchor" href="#_rpad"></a>rpad</h2>
<div class="sectionbody">
<div class="paragraph">
<p>rpad(str, len, pad) - 返回str，右侧填充pad，长度为len。如果str长于len，则返回值将缩短为len个字符</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT rpad('hi', 5, '??');
-- 输出结果：hi???

SELECT rpad('hi', 1, '??');
-- 输出结果：h</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_rtrim"><a class="anchor" href="#_rtrim"></a>rtrim</h2>
<div class="sectionbody">
<div class="paragraph">
<p>rtrim(str) - 删除str尾部的空格字符</p>
</div>
<div class="paragraph">
<p>Arguments:</p>
</div>
<div class="paragraph">
<p><strong>str</strong> - 字符串表达式</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT rtrim('    SparkSQL   ');
-- 输出结果：    SparkSQL

SELECT length(rtrim('    SparkSQL   '));
-- 输出结果：12</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
在DTinsight的结果输出栏中，此函数的输出也会将前面的空格去掉，这是前端处理的问题，实际计算时不受影响，利用length
函数统计长度，依然会将前面的空格统计进去
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_second"><a class="anchor" href="#_second"></a>second</h2>
<div class="sectionbody">
<div class="paragraph">
<p>second(timestamp) - 返回string/timestamp中秒的部分</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT second('2009-07-30 12:58:59');
-- 输出结果：59</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_sentences"><a class="anchor" href="#_sentences"></a>sentences</h2>
<div class="sectionbody">
<div class="paragraph">
<p>sentences(str[, lang, country]) - 将str分隔为一个包含每个单词的array</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT sentences('Hi there! Good morning.');
-- 输出结果：[["Hi","there"],["Good","morning"]]</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_sha"><a class="anchor" href="#_sha"></a>sha</h2>
<div class="sectionbody">
<div class="paragraph">
<p>sha(expr) - 以16进制字符串形式返回expr的sha的哈希值</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT sha('Spark');
-- 输出结果：85f5955f4b27a9a4c2aab6ffe5d7189fc298b92c</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_sha1"><a class="anchor" href="#_sha1"></a>sha1</h2>
<div class="sectionbody">
<div class="paragraph">
<p>sha1(expr) - 以16进制字符串形式返回expr的sha1的哈希值</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT sha1('Spark');
-- 输出结果：85f5955f4b27a9a4c2aab6ffe5d7189fc298b92c</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_sha2"><a class="anchor" href="#_sha2"></a>sha2</h2>
<div class="sectionbody">
<div class="paragraph">
<p>sha2(expr, bitLength) - 以返16进制字符串的形式返回expr的SHA-2系列校验和。支持SHA-224，SHA-256，SHA-384和SHA-512。位长度0等于256。</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT sha2('Spark', 256);
-- 输出结果：529bc3b07127ecb7e53a4dcf1991d9152c24537d919178022b2c42657f79a26b</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_skewness"><a class="anchor" href="#_skewness"></a>skewness</h2>
<div class="sectionbody">
<div class="paragraph">
<p>skewness(expr) - 返回一组数值中的偏度</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_smallint"><a class="anchor" href="#_smallint"></a>smallint</h2>
<div class="sectionbody">
<div class="paragraph">
<p>smallint(expr) - 将expr的类型转换（Cast）为smallint类型</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_soundex"><a class="anchor" href="#_soundex"></a>soundex</h2>
<div class="sectionbody">
<div class="paragraph">
<p>soundex(str) - 返回字符串的Soundex代码</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT soundex('Miller');
-- 输出结果：M460</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_space"><a class="anchor" href="#_space"></a>space</h2>
<div class="sectionbody">
<div class="paragraph">
<p>space(n) - 返回由n个空格组成的字符串</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT concat(space(2), '1');
-- 输出结果：  1

SELECT length(concat(space(2), '1'));
-- 输出结果：3</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_spark_partition_id"><a class="anchor" href="#_spark_partition_id"></a>spark_partition_id</h2>
<div class="sectionbody">
<div class="paragraph">
<p>spark_partition_id() - 返回当前分区的id</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_split"><a class="anchor" href="#_split"></a>split</h2>
<div class="sectionbody">
<div class="paragraph">
<p>split(str, regex) - 按照regexp正则表达式拆分字符串</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT split('oneAtwoBthreeC', '[ABC]');
-- 输出结果：["one","two","three",""]</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_stack"><a class="anchor" href="#_stack"></a>stack</h2>
<div class="sectionbody">
<div class="paragraph">
<p>stack(n, expr1, &#8230;&#8203;, exprk) - 将expr1, &#8230;&#8203;, exprk分成n行</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT stack(2, 1, 2, 3);
-- 输出结果：1  2
--          3</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_std"><a class="anchor" href="#_std"></a>std</h2>
<div class="sectionbody">
<div class="paragraph">
<p>std(expr) - 根据expr的值计算样本标准差</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_stddev"><a class="anchor" href="#_stddev"></a>stddev</h2>
<div class="sectionbody">
<div class="paragraph">
<p>stddev(expr) -  根据expr的值计算样本标准差</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_stddev_pop"><a class="anchor" href="#_stddev_pop"></a>stddev_pop</h2>
<div class="sectionbody">
<div class="paragraph">
<p>stddev_pop(expr) - 根据expr的值计算总体标准差</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_stddev_samp"><a class="anchor" href="#_stddev_samp"></a>stddev_samp</h2>
<div class="sectionbody">
<div class="paragraph">
<p>stddev_samp(expr) - 根据expr的值计算样本标准差</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_str_to_map"><a class="anchor" href="#_str_to_map"></a>str_to_map</h2>
<div class="sectionbody">
<div class="paragraph">
<p>str_to_map(text[, pairDelim[, keyValueDelim]]) - 在将text拆分为key/value的键值对后，拼接为一个map。各组k-v之间，默认的分隔符为英文逗号（,），k-v之间的分隔符，默认为英文冒号（:）</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT str_to_map('a:1,b:2,c:3', ',', ':');
-- 输出结果：map("a":"1","b":"2","c":"3")

SELECT str_to_map('a');
-- 输出结果：map("a":null)</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_string"><a class="anchor" href="#_string"></a>string</h2>
<div class="sectionbody">
<div class="paragraph">
<p>string(expr) - 将expr的类型转换（Cast）为string类型</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="substr"><a class="anchor" href="#substr"></a>substr</h2>
<div class="sectionbody">
<div class="paragraph">
<p>substr(str, pos[, len]) - 返回str的子字符串，以pos开头并且长度为len，或者以pos开头且长度为len的字节数组的片段。</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT substr('Spark SQL', 5);
-- 输出结果：k SQL

SELECT substr('Spark SQL', -3);
-- 输出结果：SQL

SELECT substr('Spark SQL', 5, 1);
-- 输出结果：k</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="substring"><a class="anchor" href="#substring"></a>substring</h2>
<div class="sectionbody">
<div class="paragraph">
<p>substring(str, pos[, len]) - 与<a href="#substr">substr</a>相同</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT substring('Spark SQL', 5);
-- 输出结果：k SQL

SELECT substring('Spark SQL', -3);
-- 输出结果：SQL

SELECT substring('Spark SQL', 5, 1);
-- 输出结果：k</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_substring_index"><a class="anchor" href="#_substring_index"></a>substring_index</h2>
<div class="sectionbody">
<div class="paragraph">
<p>substring_index(str, delim, count) - 统计字符串str中分隔符（delim）的出现次数，在出现count次之前的部分，作为子字符串返回。若count为正，则从最左侧开始统计，至第count次出现delim的部分，都会被返回。若count为负，从最右侧开始统计，至第abs(count)次出现delim的部分，都会被返回。搜索delim时，区分大小写。</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
count为正时，统计delim的出现次数，从左侧开始统计。count为负时，从右侧开始统计。
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT substring_index('www.apache.org', '.', 2);
-- 输出结果：www.apache

SELECT substring_index('www.apache.org', '.', -1);
-- 输出结果：org</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_sum"><a class="anchor" href="#_sum"></a>sum</h2>
<div class="sectionbody">
<div class="paragraph">
<p>sum(expr) - 求和</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_timestamp"><a class="anchor" href="#_timestamp"></a>timestamp</h2>
<div class="sectionbody">
<div class="paragraph">
<p>timestamp(expr) - 将expr的类型转换（Cast）为timestamp类型</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_tinyint"><a class="anchor" href="#_tinyint"></a>tinyint</h2>
<div class="sectionbody">
<div class="paragraph">
<p>tinyint(expr) - 将expr的类型转换（Cast）为tinyint类型</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_to_date"><a class="anchor" href="#_to_date"></a>to_date</h2>
<div class="sectionbody">
<div class="paragraph">
<p>to_date(date_str[, fmt]) - 将date_str按照fmt表达式，转换（Parse）为date类型。输入无效时，返回null。若省略了fmt，则按照默认规则转换</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT to_date('2009-07-30 04:17:52');
-- 输出结果：2009-07-30</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_to_unix_timestamp"><a class="anchor" href="#_to_unix_timestamp"></a>to_unix_timestamp</h2>
<div class="sectionbody">
<div class="paragraph">
<p>to_unix_timestamp(expr[, pattern]) - 根据给定的时间，返回UNIX时间戳</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT to_unix_timestamp('2016-04-08', 'yyyy-MM-dd');
-- 输出结果：1460044800</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_to_utc_timestamp"><a class="anchor" href="#_to_utc_timestamp"></a>to_utc_timestamp</h2>
<div class="sectionbody">
<div class="paragraph">
<p>to_utc_timestamp(timestamp, timezone) - 给定时间戳如 <code>2017-07-14 02：40：00.0</code> ，将其转换为给定时区的时间，并将该时间呈现为UTC时间戳。例如， <code>GMT + 1</code> 将产生 <code>2017-07-14 01：40：00.0</code></p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT to_utc_timestamp('2016-08-31', 'Asia/Seoul');
-- 输出结果：1472540400000</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_translate"><a class="anchor" href="#_translate"></a>translate</h2>
<div class="sectionbody">
<div class="paragraph">
<p>translate(input, from, to) - 对input中的部分字符替换，将from中的字符替换为to的相应字符</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT translate('AaBbCc', 'abc', '123');
-- 输出结果：A1B2C3</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_trim"><a class="anchor" href="#_trim"></a>trim</h2>
<div class="sectionbody">
<div class="paragraph">
<p>trim(str) - 从str中删除前导和尾随空格字符</p>
</div>
<div class="paragraph">
<p>Arguments:</p>
</div>
<div class="paragraph">
<p><strong>str</strong> - 字符串</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT trim('    SparkSQL   ');
-- 输出结果：SparkSQL</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_trunc"><a class="anchor" href="#_trunc"></a>trunc</h2>
<div class="sectionbody">
<div class="paragraph">
<p>trunc(date, fmt) - 返回截断后的日期，按照fmt格式指定的单位进行截断。 fmt为[“year”，“yyyy”，“yy”，“mon”，“month”，“mm”]之一</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT trunc('2009-02-12', 'MM');
-- 输出结果：2009-02-01</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT trunc('2015-10-27', 'YEAR');
-- 输出结果：2015-01-01</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="ucase"><a class="anchor" href="#ucase"></a>ucase</h2>
<div class="sectionbody">
<div class="paragraph">
<p>ucase(str) - 将str中的字符改为大写，与<a href="#upper">upper</a>相同</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT ucase('SparkSql');
-- 输出结果：SPARKSQL</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_unbase64"><a class="anchor" href="#_unbase64"></a>unbase64</h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_unix_timestamp"><a class="anchor" href="#_unix_timestamp"></a>unix_timestamp</h2>
<div class="sectionbody">
<div class="paragraph">
<p>unix_timestamp([expr[, pattern]]) - 返回当前或指定时间的UNIX时间戳</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT unix_timestamp();
-- 输出结果：1545737094

SELECT unix_timestamp('2016-04-08', 'yyyy-MM-dd');
-- 输出结果：1460044800</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="upper"><a class="anchor" href="#upper"></a>upper</h2>
<div class="sectionbody">
<div class="paragraph">
<p>upper(str) - 将str中的字符改为大写，与<a href="#ucase">ucase</a>相同</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT upper('SparkSql');
-- 输出结果：SPARKSQL</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="var_pop"><a class="anchor" href="#var_pop"></a>var_pop</h2>
<div class="sectionbody">
<div class="paragraph">
<p>var_pop(expr) - 根据expr的值计算总体方差</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="var_samp"><a class="anchor" href="#var_samp"></a>var_samp</h2>
<div class="sectionbody">
<div class="paragraph">
<p>var_samp(expr) - 根据expr的值计算样本方差，与<a href="#variance">variance</a>相同</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="variance"><a class="anchor" href="#variance"></a>variance</h2>
<div class="sectionbody">
<div class="paragraph">
<p>variance(expr) - 根据expr的值计算样本方差，与<a href="#var_samp">var_samp</a>相同</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_weekofyear"><a class="anchor" href="#_weekofyear"></a>weekofyear</h2>
<div class="sectionbody">
<div class="paragraph">
<p>weekofyear(date) - 返回给定日期是那一年的第几周。1周，从周一开始。一年中，第一周需要超过3天（例如某年的1月1日为周六，由于不足3天，不作为第一周，第一周从1月3日的那一周开始）</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT weekofyear('2008-02-20');
-- 输出结果：8</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_when"><a class="anchor" href="#_when"></a>when</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">CASE WHEN expr1
     THEN expr2
    [WHEN expr3
     THEN expr4]
     *
    [ELSE expr5]
END</code></pre>
</div>
</div>
<div class="paragraph">
<p>用于SQL中的CASE WHEN语句，当expr1为true时，返回expr2，否则继续判断expr3，当expr3为true，返回expr4，否则返回expr5</p>
</div>
<div class="paragraph">
<p>Arguments:</p>
</div>
<div class="paragraph">
<p><strong>expr1, expr3</strong> - 分支条件表达式，布尔类型</p>
</div>
<div class="paragraph">
<p><strong>expr2, expr4, expr5</strong> - 分支值表达式与else值表达式，应为相同类型，或可强制转换为同一种类型</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT CASE WHEN 1 &gt; 0 THEN 1 WHEN 2 &gt; 0 THEN 2.0 ELSE 1.2 END;
-- 输出结果：1

SELECT CASE WHEN 1 &lt; 0 THEN 1 WHEN 2 &gt; 0 THEN 2.0 ELSE 1.2 END;
-- 输出结果：2

SELECT CASE WHEN 1 &lt; 0 THEN 1 WHEN 2 &lt; 0 THEN 2.0 END;
-- 输出结果：</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_window"><a class="anchor" href="#_window"></a>window</h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_xpath"><a class="anchor" href="#_xpath"></a>xpath</h2>
<div class="sectionbody">
<div class="paragraph">
<p>xpath(xml, xpath) - 返回xml节点中，与xpath表达式匹配的字符串数组值</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT xpath('&lt;a&gt;&lt;b&gt;b1&lt;/b&gt;&lt;b&gt;b2&lt;/b&gt;&lt;b&gt;b3&lt;/b&gt;&lt;c&gt;c1&lt;/c&gt;&lt;c&gt;c2&lt;/c&gt;&lt;/a&gt;','a/b/text()');
-- 输出结果：['b1','b2','b3']</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_xpath_boolean"><a class="anchor" href="#_xpath_boolean"></a>xpath_boolean</h2>
<div class="sectionbody">
<div class="paragraph">
<p>xpath_boolean(xml, xpath) - 如果xpath表达式的计算结果为true，或者找到匹配的节点，则返回true</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT xpath_boolean('&lt;a&gt;&lt;b&gt;0&lt;/b&gt;&lt;/a&gt;','a/b');
-- 输出结果：true

SELECT xpath_boolean('&lt;a&gt;&lt;b&gt;0&lt;/b&gt;&lt;c&gt;2&lt;/c&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;','sum(a/b)');
-- 输出结果：false</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="xpath_double"><a class="anchor" href="#xpath_double"></a>xpath_double</h2>
<div class="sectionbody">
<div class="paragraph">
<p>xpath_double(xml, xpath) - 返回double类型的值，若未找到匹配值，则返回0，若成功匹配，但值为非数值型，则返回Nan，与<a href="#xpath_number">xpath_number</a>相同</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT xpath_double('&lt;a&gt;&lt;b&gt;1&lt;/b&gt;&lt;b&gt;2&lt;/b&gt;&lt;/a&gt;', 'sum(a/b)');
-- 输出结果：3.0</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_xpath_float"><a class="anchor" href="#_xpath_float"></a>xpath_float</h2>
<div class="sectionbody">
<div class="paragraph">
<p>xpath_float(xml, xpath) - 返回float类型的值，若未找到匹配值，则返回0，若成功匹配，但值为非数值型，则返回Nan</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT xpath_float('&lt;a&gt;&lt;b&gt;1&lt;/b&gt;&lt;b&gt;2&lt;/b&gt;&lt;/a&gt;', 'sum(a/b)');
-- 输出结果：3.0</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_xpath_int"><a class="anchor" href="#_xpath_int"></a>xpath_int</h2>
<div class="sectionbody">
<div class="paragraph">
<p>xpath_int(xml, xpath) - 返回int类型的值，若未找到匹配值，则返回0，若成功匹配，但值为非数值型，则返回Nan</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT xpath_int('&lt;a&gt;&lt;b&gt;1&lt;/b&gt;&lt;b&gt;2&lt;/b&gt;&lt;/a&gt;', 'sum(a/b)');
-- 输出结果：3</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_xpath_long"><a class="anchor" href="#_xpath_long"></a>xpath_long</h2>
<div class="sectionbody">
<div class="paragraph">
<p>xpath_long(xml, xpath) - 返回long类型的值，若未找到匹配值，则返回0，若成功匹配，但值为非数值型，则返回Nan</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT xpath_long('&lt;a&gt;&lt;b&gt;1&lt;/b&gt;&lt;b&gt;2&lt;/b&gt;&lt;/a&gt;', 'sum(a/b)');
-- 输出结果：3</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="xpath_number"><a class="anchor" href="#xpath_number"></a>xpath_number</h2>
<div class="sectionbody">
<div class="paragraph">
<p>xpath_number(xml, xpath) - 返回double类型的值，若未找到匹配值，则返回0，若成功匹配，但值为非数值型，则返回Nan，与<a href="#xpath_double">xpath_double</a>相同</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT xpath_number('&lt;a&gt;&lt;b&gt;1&lt;/b&gt;&lt;b&gt;2&lt;/b&gt;&lt;/a&gt;', 'sum(a/b)');
-- 输出结果：3</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_xpath_short"><a class="anchor" href="#_xpath_short"></a>xpath_short</h2>
<div class="sectionbody">
<div class="paragraph">
<p>xpath_short(xml, xpath) - 返回short类型的值，若未找到匹配值，则返回0，若成功匹配，但值为非数值型，则返回Nan</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT xpath_short('&lt;a&gt;&lt;b&gt;1&lt;/b&gt;&lt;b&gt;2&lt;/b&gt;&lt;/a&gt;', 'sum(a/b)');
-- 输出结果：3</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_xpath_string"><a class="anchor" href="#_xpath_string"></a>xpath_string</h2>
<div class="sectionbody">
<div class="paragraph">
<p>xpath_string(xml, xpath) - 返回xpath匹配的第一个xml文档节点的文本</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT xpath_string('&lt;a&gt;&lt;b&gt;b&lt;/b&gt;&lt;c&gt;cc&lt;/c&gt;&lt;/a&gt;','a/c');
-- 输出结果：cc</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_year"><a class="anchor" href="#_year"></a>year</h2>
<div class="sectionbody">
<div class="paragraph">
<p>year(date) - 返回date/timestamp中年的部分</p>
</div>
<div class="paragraph">
<p>Examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-SQL hljs" data-lang="SQL">SELECT year('2016-07-30');
-- 输出结果：2016</code></pre>
</div>
</div>
</div>
</div>
</article>
</main>
</div>
<footer class="footer">
  <!--div class="container">
    <div class="footer-links">
      <div class="col">
        <div class="footer-logo">
          <a href="https://www.dtstack.com" class="icon">
            <img src="../../../_/img/logo.svg" alt="Couchbase">
          </a>
        </div>
        <div class="contact">
          <p class="address">2440 West El Camino Real
Mountain View, CA 94040
United States</p>
          <a href="https://www.couchbase.com/contact" class="btn white-btn">Contact Us</a>
          <a class="tel" href="tel:1-650-417-7500">1-650-417-7500</a>
        </div>
      </div>
      <div class="col">
        <ul>
          <li><span class="heading">Company</span></li>
          <li><a href="https://www.couchbase.com/about">About</a></li>
          <li><a href="https://www.couchbase.com/leadership">Leadership</a></li>
          <li><a href="https://www.couchbase.com/news-and-press-releases">News &amp; Press</a></li>
          <li><a href="https://www.couchbase.com/careers">Careers</a></li>
          <li><a href="https://www.couchbase.com/resources/events">Events</a></li>
          <li><a href="https://www.couchbase.com/contact">Contact Us</a></li>
          <li><a href="https://www.couchbase.com/request-pricing">Pricing</a></li>
        </ul>
      </div>
      <div class="col">
        <ul>
          <li><span class="heading">Support</span></li>
          <li><a href="https://developer.couchbase.com" target="_blank" rel="noopener">Developer Portal</a></li>
          <li><a href="https://docs.couchbase.com" target="_blank" rel="noopener">Documentation</a></li>
          <li><a href="https://forums.couchbase.com" target="_blank" rel="noopener">Forums</a></li>
          <li><a href="https://www.couchbase.com/services">Professional Services</a></li>
          <li><a href="https://support.couchbase.com" target="_blank" rel="noopener">Support Login</a></li>
          <li><a href="https://training.couchbase.com" target="_blank" rel="noopener">Training</a></li>
        </ul>
      </div>
      <div class="col">
        <ul>
          <li><span class="heading">Quicklinks</span></li>
          <li><a href="https://blog.couchbase.com" target="_blank" rel="noopener">Blog</a></li>
          <li><a href="https://www.couchbase.com/downloads">Downloads</a></li>
          <li><a href="https://www.couchbase.com/get-started-developing-nosql">Get Started</a></li>
          <li><a href="https://training.couchbase.com/online" target="_blank" rel="noopener">Online Training</a></li>
          <li><a href="https://www.couchbase.com/resources">Resources</a></li>
          <li><a href="https://www.couchbase.com/nosql-resources/why-nosql">Why NoSQL</a></li>
          <li><a href="https://www.couchbase.com/resources/security">Security</a></li>
          <li><a href="https://www.couchbase.com/resources/gdpr">GDPR</a></li>
        </ul>
      </div>
      <div class="col">
        <ul class="social-icons">
          <li>
            <a href="https://www.facebook.com/Couchbase" class="icon">
              <svg width="50px" height="50px" viewBox="26.363 116.363 560.215 560.215"><path d="m586.58 209.58c0-48.96-44.252-93.212-93.212-93.212h-373.79c-48.96 0-93.212 44.252-93.212 93.212v373.79c0 48.96 44.252 93.212 93.212 93.212h186.42v-211.85h-68.732v-93.212h68.732v-36.72c0-63.083 47.077-119.58 105.45-119.58h75.323v93.212h-75.323c-8.474 0-17.889 10.357-17.889 25.422v37.662h93.212v93.212h-93.212v211.85h99.803c48.96 0 93.212-44.252 93.212-93.212v-373.79z"/></svg>
            </a>
          </li>
          <li>
            <a href="https://twitter.com/couchbase" class="icon">
              <svg width="50px" height="50px" viewBox="32.012 176.622 542.326 437.815"><path d="m574.34 227.46c-19.772 8.474-41.428 15.065-64.025 17.889 22.597-14.123 40.486-35.778 48.96-61.2-21.655 13.182-45.194 21.655-70.615 27.305-20.714-21.655-48.96-34.837-80.972-34.837-61.2 0-111.1 49.902-111.1 111.1 0 8.474 0.942 16.948 2.825 25.422-92.271-5.649-174.18-49.902-229.74-117.69-9.415 16.006-15.065 35.778-15.065 55.551 0 38.603 19.772 72.498 49.902 92.271-17.889-0.942-35.778-5.649-50.843-14.123v0.942c0 53.668 38.603 98.862 89.446 109.22-9.415 2.825-18.831 3.766-29.188 3.766-7.532 0-14.123-0.942-20.714-1.883 14.123 44.252 55.551 76.265 103.57 77.206-37.662 30.129-85.68 48.018-138.41 48.018-9.415 0-17.889-0.941-26.363-1.883 48.96 32.012 107.34 49.902 170.42 49.902 204.31 0 316.36-169.48 316.36-316.36v-14.123c21.656-14.125 40.487-33.897 55.551-56.494z"/></svg>
            </a>
          </li>
          <li>
            <a href="https://www.linkedin.com/company/couchbase" class="icon">
              <svg width="50px" height="50px" viewBox="31.071 119.188 539.537 540.443"><path d="m531.97 119.19h-461.35c-21.655 0-39.545 16.948-39.545 38.603v463.24c0 21.655 17.889 38.603 39.545 38.603h460.41c21.655 0 39.545-16.948 39.545-38.603v-463.24c0.942-21.656-16.947-38.603-38.603-38.603zm-337.07 451.94h-81.914v-243.86h81.914v243.86zm-40.486-276.81c-28.246 0-46.135-18.831-46.135-42.369s17.889-42.369 46.135-42.369 45.194 17.889 45.194 42.369c0.942 23.538-16.948 42.369-45.194 42.369zm335.19 276.81h-81.914v-129.93c0-32.954-12.24-55.551-41.428-55.551-22.597 0-35.778 15.065-41.428 30.129-1.883 5.649-2.825 12.24-2.825 19.772v136.52h-81.914s0.942-221.26 0-243.86h81.914v34.837c11.298-16.948 30.129-40.486 73.44-40.486 53.668 0 94.154 34.837 94.154 110.16l1e-3 138.41zm-168.54-208.08s0.941-0.941 0 0z"/></svg>
            </a>
          </li>
          <li>
            <a href="https://plus.google.com/+CouchbaseServer" class="icon">
              <svg width="50px" height="50px" viewBox="36.72 225.573 542.326 343.67"><path d="m209.02 363.05v68.732h93.212c-15.065 44.252-37.662 68.732-93.212 68.732-56.492 0-100.74-46.135-100.74-102.63s44.252-102.63 100.74-102.63c30.129 0 48.96 10.357 66.849 25.422 14.123-14.123 13.182-16.006 48.96-49.902-31.071-28.246-71.557-45.194-115.81-45.194-95.096-0.94-172.3 76.266-172.3 171.36s77.206 172.3 172.3 172.3c142.17 0 177.01-124.28 165.71-206.2-33.896-1e-3 -165.71-1e-3 -165.71-1e-3zm310.71 3.766v-59.317h-42.369v59.317h-61.2v42.369h61.2v61.2h42.369v-61.2h59.317v-42.369h-59.317z"/></svg>
            </a>
          </li>
        </ul>
      </div>
    </div>
    <div class="footer-terms">
      <span>2018 COUCHBASE All rights reserved.</span>
      <a href="https://www.couchbase.com/privacy-policy">Privacy Policy</a>
      <a href="https://www.couchbase.com/terms-of-use">Terms of Use</a>
      <a href="https://www.couchbase.com/cookie-policy">Cookie Policy</a>
      <a href="https://info.couchbase.com/unsubscribe-or-manage-preferences.html" target="_blank" rel="noopener">Marketing Preference Center</a>
    </div>
  </div-->
</footer>
<script src="../../../_/js/site.js"></script>
<script async src="../../../_/js/vendor/highlight.js"></script>
  </body>
</html>
