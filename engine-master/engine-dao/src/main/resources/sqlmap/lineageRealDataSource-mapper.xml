<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dtstack.engine.dao.LineageRealDataSourceDao">

    <sql id="select_content_fragment">
      id,source_name,source_key,source_type,data_json,kerberos_conf,open_kerberos,gmt_create,gmt_modified,is_deleted
    </sql>

    <sql id="update_fragment">
        <set>
            <if test="sourceName!=null">
                source_name = #{sourceName},
            </if>
            <if test="sourceKey!=null">
                source_key = #{sourceKey},
            </if>
            <if test="dataJson!=null">
                data_json = #{dataJson},
            </if>
            <if test="kerberosConf!=null">
                kerberos_conf = #{kerberosConf},
            </if>
            <if test="openKerberos!=null">
                open_kerberos = #{openKerberos},
            </if>
            <if test="isDeleted!=null">
                is_deleted = #{isDeleted},
            </if>
            <if test="gmtCreate != null">
                gmt_create = #{gmtCreate},
            </if>
            <if test="gmtModified != null">
                gmt_modified = #{gmtModified},
            </if>
        </set>
    </sql>

    <sql id="select_where_fragment">
        <trim prefix="WHERE" prefixOverrides="AND |OR ">
            <if test="model.id != null and model.id > 0">
                AND id = #{model.id}
            </if>
        </trim>
    </sql>

    <insert id="addRealDataSource" parameterType="com.dtstack.engine.api.domain.LineageRealDataSource" useGeneratedKeys="true" keyProperty="id">
        insert into lineage_real_data_source(source_name,source_key,source_type,data_json,kerberos_conf,open_kerberos)
        VALUES
        (#{sourceName},#{sourceKey},#{sourceType},#{dataJson},#{kerberosConf},#{openKerberos})
    </insert>

    <update id="updateRealDataSource" parameterType="com.dtstack.engine.api.domain.LineageRealDataSource">
        update lineage_real_data_source
        <include refid="update_fragment"/>
        where id = #{id}
    </update>

    <delete id="deleteRealDataSource">
        update lineage_real_data_source set is_deleted = 1 where id = #{id}
    </delete>

    <select id="getOne" resultType="com.dtstack.engine.api.domain.LineageRealDataSource">
        select <include refid="select_content_fragment"/> from lineage_real_data_source
        where id = #{id}
    </select>

    <select id="getOneBySourceKey" resultType="com.dtstack.engine.api.domain.LineageRealDataSource">
        select
        <include refid="select_content_fragment"/>
        from lineage_real_data_source
        where source_key like concat('%',#{sourceKey},'%')
        and is_deleted = 0
    </select>


</mapper>
