<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dtstack.taier.dao.mapper.DevelopTaskDao">

    <sql id="select_content_fragment">
      id,tenant_id,node_pid,name,task_type,compute_type,sql_text,task_params,schedule_conf,period_type,
      schedule_status,submit_status,gmt_create,gmt_modified,modify_user_id,create_user_id,version,is_deleted,task_desc,main_class,exe_args,flow_id,component_version
    </sql>

    <sql id="simple_select_content_fragment">
        id,tenant_id,node_pid,name,task_type,compute_type,period_type,
      schedule_status,submit_status,gmt_create,gmt_modified,modify_user_id,create_user_id,version,is_deleted,task_desc,main_class,exe_args,flow_id,component_version
    </sql>

    <sql id="select_where_fragment">
        <trim prefix="WHERE" prefixOverrides="AND |OR ">
            <if test="model.id != null and model.id > 0">
                AND id = #{model.id}
            </if>
            <if test="model.tenantId != null">
                AND tenant_id = #{model.tenantId}
            </if>
            <if test="model.nodePid != null">
                AND node_pid = #{model.nodePid}
            </if>
            <if test="model.name != null">
                AND name = #{model.name}
            </if>
            <if test="model.taskType != null">
                AND task_type = #{model.taskType}
            </if>
            <if test="model.computeType != null">
                AND compute_type = #{model.computeType}
            </if>
            <if test="model.sqlText != null">
                AND sql_text = #{model.sqlText}
            </if>
            <if test="model.taskParams != null">
                AND task_params = #{model.taskParams}
            </if>
            <if test="model.scheduleConf != null">
                AND schedule_conf = #{model.scheduleConf}
            </if>
            <if test="model.periodType != null">
                AND period_type = #{model.periodType}
            </if>
            <if test="model.scheduleStatus != null">
                AND schedule_status = #{model.scheduleStatus}
            </if>
            <if test="model.submitStatus != null">
                AND submit_status = #{model.submitStatus}
            </if>
            <if test="model.gmtCreate != null">
                AND gmt_create = #{model.gmtCreate}
            </if>
            <if test="model.gmtModified != null">
                AND gmt_modified = #{model.gmtModified}
            </if>
            <if test="model.modifyUserId != null">
                AND modify_user_id = #{model.modifyUserId}
            </if>
            <if test="model.createUserId != null">
                AND create_user_id = #{model.createUserId}
            </if>
            <if test="model.version != null">
                AND version = #{model.version}
            </if>
            <if test="model.isDeleted != null">
                AND is_deleted = #{model.isDeleted}
            </if>
            <if test="model.taskDesc != null">
                AND task_desc = #{model.taskDesc}
            </if>
            <if test="model.mainClass != null">
                AND main_class = #{model.mainClass}
            </if>
            <if test="model.exeArgs != null">
                AND exe_args = #{model.exeArgs}
            </if>
            <if test="model.fuzzName != null">
                AND name like concat(concat('%',#{model.fuzzName}),'%')
            </if>
            <if test="model.startGmtModified != null">
                AND gmt_modified &gt;= #{model.startGmtModified}
            </if>

            <if test="model.endGmtModified != null">
                AND gmt_modified &lt;= #{model.endGmtModified}
            </if>

            <if test="model.flowId != null">
                AND flow_id = #{model.flowId}
            </if>
        </trim>
    </sql>

    <sql id="update_fragment">
        <set>
            <if test="id != null">
                id = #{id},
            </if>
            <if test="tenantId != null">
                tenant_id = #{tenantId},
            </if>
            <if test="nodePid != null">
                node_pid = #{nodePid},
            </if>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="taskType != null">
                task_type = #{taskType},
            </if>
            <if test="computeType != null">
                compute_type = #{computeType},
            </if>
            <if test="sqlText != null">
                sql_text = #{sqlText},
            </if>
            <if test="taskParams != null">
                task_params = #{taskParams},
            </if>
            <if test="scheduleConf != null">
                schedule_conf = #{scheduleConf},
            </if>
            <if test="periodType != null">
                period_type = #{periodType},
            </if>
            <if test="scheduleStatus != null">
                schedule_status = #{scheduleStatus},
            </if>
            <if test="submitStatus != null">
                submit_status = #{submitStatus},
            </if>
            <if test="gmtCreate != null">
                gmt_create = #{gmtCreate},
            </if>
            <if test="modifyUserId != null">
                modify_user_id = #{modifyUserId},
            </if>
            <if test="createUserId != null">
                create_user_id = #{createUserId},
            </if>
            <if test="isDeleted != null">
                is_deleted = #{isDeleted},
            </if>
            <if test="taskDesc != null">
                task_desc = #{taskDesc},
            </if>
            <if test="mainClass != null">
                main_class = #{mainClass},
            </if>
            <if test="exeArgs != null">
                exe_args = #{exeArgs},
            </if>
            <if test="componentVersion != null">
                component_version = #{componentVersion},
            </if>
            version = version+1,
            gmt_modified = now(),
        </set>
    </sql>

    <select id="getOne" resultType="com.dtstack.taier.dao.domain.BatchTask">
        SELECT
        <include refid="select_content_fragment"/>
        FROM develop_task
        WHERE id = #{id} AND is_deleted = 0
    </select>

    <select id="getOneWithDeleted" resultType="com.dtstack.taier.dao.domain.BatchTask">
        SELECT
        <include refid="select_content_fragment"/>
        FROM develop_task
        WHERE id = #{id}
    </select>

    <select id="generalQuery" parameterType="com.dtstack.taier.dao.pager.PageQuery" resultType="com.dtstack.taier.dao.domain.BatchTask">
        SELECT
        <include refid="select_content_fragment"/>
        FROM develop_task
        <include refid="select_where_fragment"/>
        <if test="orderBy != null and sort != null">
            order by ${orderBy} ${sort}
        </if>
        <if test="orderBy != null and sort == null">
            order by ${orderBy} desc
        </if>
        <if test="start != null and pageSize != null">
            limit #{start} , #{pageSize}
        </if>
        <if test="start == null and pageSize != null">
            limit #{pageSize}
        </if>
        <if test="start == null and pageSize == null">
            limit 1000
        </if>
    </select>

    <select id="generalQueryWithoutSql" parameterType="com.dtstack.taier.dao.pager.PageQuery" resultType="com.dtstack.taier.dao.domain.BatchTask">
        SELECT
        id,tenant_id,node_pid,name,task_type,compute_type,task_params,schedule_conf,period_type,
        schedule_status,submit_status,gmt_create,gmt_modified,modify_user_id,create_user_id,version,is_deleted,task_desc,main_class,exe_args,flow_id
        FROM develop_task
        <include refid="select_where_fragment"/>
        <if test="orderBy != null and sort != null">
            order by ${orderBy} ${sort}
        </if>
        <if test="orderBy != null and sort == null">
            order by ${orderBy} desc
        </if>
        <if test="start != null and pageSize != null">
            limit #{start} , #{pageSize}
        </if>
        <if test="start == null and pageSize != null">
            limit #{pageSize}
        </if>
        <if test="start == null and pageSize == null">
            limit 1000
        </if>
    </select>

    <select id="generalCount" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM develop_task
        <include refid="select_where_fragment"/>
        limit 1
    </select>

    <select id="listBatchTaskByNodePid" resultType="com.dtstack.taier.dao.domain.BatchTask">
        SELECT
        <include refid="select_content_fragment"/>
        FROM develop_task
        WHERE node_pid = #{nodePid} and tenant_id = #{tenantId} and is_deleted = 0
    </select>

    <select id="listByNameFuzzy" resultType="com.dtstack.taier.dao.domain.BatchTask">
        SELECT
        <include refid="simple_select_content_fragment"/>
        FROM develop_task
        WHERE tenant_id = #{tenantId} and name like CONCAT('%',#{name},'%') and is_deleted = 0
    </select>

    <delete id="deleteById">
        UPDATE develop_task SET is_deleted = 1, gmt_modified = now(), modify_user_id = #{modifyUserId}
        WHERE id = #{id} AND is_deleted = 0 AND tenant_id = #{tenantId}
    </delete>

    <select id="listByTenantId" resultType="com.dtstack.taier.dao.domain.BatchTask">
        SELECT
        <include refid="simple_select_content_fragment"/>
        FROM develop_task
        WHERE tenant_id = #{tenantId} and is_deleted = 0
    </select>

    <select id="listByIds" resultType="com.dtstack.taier.dao.domain.BatchTask">
        SELECT
        <include refid="select_content_fragment"/>
        FROM develop_task
        WHERE is_deleted = 0 AND id IN
        <foreach item="id" index="index" collection="ids" open="(" separator="," close=")">
                #{id}
        </foreach>

    </select>

    <select id="listByFlowId" resultType="com.dtstack.taier.dao.domain.BatchTask">
        SELECT
        <include refid="select_content_fragment"/>
        FROM develop_task
        where is_deleted = 0 and flow_id = #{flowId}
    </select>

    <select id="listAll" resultType="com.dtstack.taier.dao.domain.BatchTask">
        SELECT
        <include refid="simple_select_content_fragment"/>
        FROM develop_task
        WHERE is_deleted = 0 and submit_status != 0
    </select>

    <select id="getByName" resultType="com.dtstack.taier.dao.domain.BatchTask">
        SELECT
        <include refid="select_content_fragment"/>
        FROM develop_task
        WHERE name = #{name} and tenant_id = #{tenantId}
        and is_deleted=0 limit 1
    </select>

    <select id="getByNameList" resultType="com.dtstack.taier.dao.domain.BatchTask">
        SELECT
        <include refid="simple_select_content_fragment"/>
        FROM develop_task
        WHERE name in
        <foreach collection="nameList" item="name" open="(" close=")" separator=",">
            #{name}
        </foreach>
         and tenant_id = #{tenantId}
        and is_deleted=0
    </select>

    <insert id="insert" parameterType="com.dtstack.taier.dao.domain.BatchTask" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO develop_task
          (tenant_id,node_pid,name,task_type,compute_type,sql_text,task_params,schedule_conf,period_type,
          schedule_status,submit_status,gmt_create,gmt_modified,modify_user_id,create_user_id,version,is_deleted,task_desc,main_class,exe_args,flow_id,component_version)
        VALUES
          (#{tenantId},#{nodePid},#{name},#{taskType},#{computeType},#{sqlText},#{taskParams},#{scheduleConf},#{periodType},
          #{scheduleStatus},#{submitStatus},#{gmtCreate},#{gmtModified},#{modifyUserId},#{createUserId},#{version},#{isDeleted},#{taskDesc},#{mainClass},#{exeArgs},#{flowId},#{componentVersion})
    </insert>

    <update id="update" parameterType="com.dtstack.taier.dao.domain.BatchTask">
        UPDATE
        develop_task
        <include refid="update_fragment"/>
        WHERE
        id = #{id} AND is_deleted = 0
    </update>
    
    <update id="updateSubmitStatus">
        UPDATE develop_task set submit_status=#{submitStatus},gmt_modified=#{time} where id=#{id} and tenant_id=#{tenantId}
    </update>

    <select id="listTaskByType" resultType="com.dtstack.taier.dao.domain.BatchTask">
        SELECT
        <include refid="simple_select_content_fragment"/>
        FROM develop_task
        WHERE tenant_id = #{tenantId} and task_type = #{type}
        <if test="taskName != null">
            and name like CONCAT('%',#{taskName},'%')
        </if>
        and  is_deleted = 0
    </select>

    <update id="batchUpdateTaskScheduleStatus">
        UPDATE
        develop_task
        set schedule_status = #{scheduleStatus}
        WHERE
        id in
        <foreach item="id" index="index" collection="taskIds" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND is_deleted = 0
    </update>

    <select id="countByTenantIdAndSubmit" resultType="java.lang.Integer">
        SELECT
        count(1)
        FROM develop_task
        WHERE tenant_id = #{tenantId} and is_deleted = 0 and flow_id = 0
        <if test="isSubmit != null">
            AND submit_status = #{isSubmit}
        </if>
    </select>
    
    <select id="countAll" resultType="java.lang.Integer">
        SELECT
        count(1)
        FROM develop_task
        WHERE is_deleted = 0
        limit 1
    </select>

    <!--适用于任务列表的目录信息list查询,不查询sql_text等无用的大字段 -->
    <select id="catalogueListBatchTaskByNodePid" resultType="com.dtstack.taier.dao.domain.BatchTask">
        SELECT
        t.id,t.tenant_id,t.node_pid,t.name,t.task_type,t.compute_type,t.period_type,t.schedule_status,t.submit_status,
        t.gmt_create,t.gmt_modified,t.modify_user_id,t.create_user_id,t.version,t.is_deleted,t.task_desc,t.main_class,t.exe_args,t.flow_id,
        if(t.version != ifnull(tv.version,-1),0,1) as status
        FROM develop_task t left join (select task_id,max(version) as version from develop_task_version group by task_id)tv on t.id = tv.task_id
        WHERE t.node_pid = #{nodePid} and t.tenant_id = #{tenantId} and t.is_deleted = 0
    </select>

    <update id="updateSqlText" parameterType="com.dtstack.taier.dao.domain.BatchTask">
        UPDATE
        develop_task
        <include refid="update_fragment"/>
        WHERE
        id = #{id}  AND is_deleted = 0
    </update>

    <update id="updateScheduleConf" parameterType="com.dtstack.taier.dao.domain.BatchTask">
        UPDATE
        develop_task
        set period_type = #{periodType},
        schedule_conf = #{scheduleConf}
        WHERE
        flow_id = #{flowId}
    </update>

    <delete id="deleteByName">
        UPDATE develop_task SET is_deleted = 1, gmt_modified = now(), modify_user_id = #{userId}
        WHERE name = #{name} and tenant_id = #{tenantId} and is_deleted=0
    </delete>


    <select id="listAllSubmitTask" resultType="com.dtstack.taier.dao.domain.BatchTask">
        SELECT
        <include refid="select_content_fragment"/>
        FROM develop_task
        WHERE submit_status = #{submitStatus}
        <if test="taskTypes != null and taskTypes.size()>0">
            and task_type in
            <foreach collection="taskTypes" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        AND is_deleted = 0
    </select>

    <select id="listSubmitTaskByIds" resultType="com.dtstack.taier.dao.domain.BatchTask">
        SELECT
        <include refid="select_content_fragment"/>
        FROM develop_task
        WHERE is_deleted = 0 AND submit_status = 1 AND tenant_id = #{tenantId}
        <if test="taskIds != null and taskIds.size()>0">
            AND id in
            <foreach collection="taskIds" item="id" open="(" close=")" separator=",">
                #{id}
            </foreach>
        </if>
    </select>

    <update id="deleteByTenantId" parameterType="java.lang.Long">
        UPDATE develop_task
        SET is_deleted = 1, gmt_modified = now(), modify_user_id = #{userId}
        WHERE tenant_id = #{tenantId} AND is_deleted = 0;
    </update>

</mapper>
