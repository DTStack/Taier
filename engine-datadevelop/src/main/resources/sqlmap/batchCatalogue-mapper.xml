<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dtstack.batch.dao.BatchCatalogueDao">

    <sql id="select_content_fragment">
      id,tenant_id,project_id,node_name,node_pid,order_val,engine_type,level,gmt_create,gmt_modified,create_user_id,is_deleted,catalogue_type
    </sql>

    <sql id="update_fragment">
        <set>
            <if test="tenantId != null">
                tenant_id = #{tenantId},
            </if>
            <if test="projectId != null">
                project_id = #{projectId},
            </if>
            <if test="nodeName != null">
                node_name = #{nodeName},
            </if>
            <if test="nodePid != null">
                node_pid = #{nodePid},
            </if>
            <if test="orderVal != null">
                order_val = #{orderVal},
            </if>
            <if test="level != null">
                level = #{level},
            </if>
            <if test="engineType !=null">
                engine_type = #{engineType},
            </if>
            <if test="createUserId != null">
                create_user_id = #{createUserId},
            </if>
            gmt_modified = now(),
        </set>
    </sql>

    <select id="getOne" resultType="BatchCatalogue">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_batch_catalogue
        WHERE id = #{id} AND is_deleted = 0
    </select>

    <select id="getByPidAndName" resultType="BatchCatalogue">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_batch_catalogue
        WHERE project_id = #{projectId} and node_pid = #{nodePid}
        and node_name = #{name} and is_deleted=0 limit 1
    </select>

    <select id="listByPidAndProjectId" resultType="BatchCatalogue">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_batch_catalogue
        WHERE project_id = #{projectId} and node_pid = #{nodePid} and is_deleted = 0 order by gmt_create desc
    </select>

    <select id="listByLevelAndProjectId" resultType="BatchCatalogue">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_batch_catalogue
        WHERE project_id = #{projectId} and level = #{level} and is_deleted = 0 order by order_val asc
    </select>

    <select id="getByLevelAndProjectIdAndName" resultType="BatchCatalogue">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_batch_catalogue
        WHERE project_id = #{projectId} and level = #{level} and node_name = #{name} and is_deleted = 0
        limit 1
    </select>

    <select id="listByNameFuzzy" resultType="BatchCatalogue">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_batch_catalogue
        WHERE is_deleted = 0 and project_id = #{projectId} and node_name like CONCAT('%',#{name},'%')
    </select>

    <select id="getSystemFunctionCatalogueOne" resultType="BatchCatalogue">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_batch_catalogue
        WHERE node_pid = #{engineType} and level = 1 and project_id = -1 limit 1
    </select>

    <insert id="insert" parameterType="BatchCatalogue" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO rdos_batch_catalogue
          (tenant_id,project_id,node_name,node_pid,order_val,level,create_user_id,engine_type,catalogue_type)
        VALUES
          (#{tenantId},#{projectId},#{nodeName},#{nodePid},#{orderVal},#{level},#{createUserId},#{engineType},#{catalogueType})
    </insert>

    <update id="update" parameterType="BatchCatalogue">
        UPDATE
        rdos_batch_catalogue
        <include refid="update_fragment"/>
        WHERE
        id = #{id} AND is_deleted = 0
    </update>

    <select id="listByProjectId" resultType="BatchCatalogue">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_batch_catalogue
        WHERE project_id = #{projectId} and is_deleted = 0
    </select>

    <update id="deleteById">
        UPDATE
        rdos_batch_catalogue
        set is_deleted = 1,gmt_modified = now()
        WHERE
        id = #{id} AND is_deleted = 0
    </update>

    <select id="getAllPathParentCatalogues" resultMap="catalogueMap">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_batch_catalogue
        WHERE id = #{nodePid} and is_deleted = 0
    </select>

    <resultMap id="catalogueMap" type="BatchCatalogue" autoMapping="true">
        <id column="id" property="id"/>
        <collection property="parentCatalogue"  column="node_pid" ofType="BatchCatalogue"
                    select="getAllPathParentCatalogues"></collection>
    </resultMap>

    <select id="getByLevelAndParentIdAndProjectIdAndName" resultType="BatchCatalogue">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_batch_catalogue
        WHERE project_id = #{projectId}
        and node_name = #{name} and is_deleted = 0 and level = #{level}
        <if test="parentId != null">
            and node_pid = #{parentId}
        </if>
         limit 1
    </select>

    <!--校验当前目录下直接一层的子目录或者文件的个数总数不可超过2000-->
    <select id="getSubAmountsByNodePid" resultType="java.lang.Integer">
      select count(1)
        from rdos_batch_catalogue
        where node_pid = #{nodePid}
        <if test="nodePid != null and nodePid == '0'.toString()">
            and project_id = #{projectId}
        </if>
         and is_deleted = 0
    </select>

    <select id="getListByTenantIdAndCatalogueType" resultType="BatchCatalogue">
        select
        <include refid="select_content_fragment"/>
        FROM rdos_batch_catalogue
        WHERE tenant_id = #{tenantId} and catalogue_type = #{catalogueType} and  is_deleted = 0
    </select>

    <select id="getProjectRoot" resultType="BatchCatalogue">
        select
        <include refid="select_content_fragment"/>
        FROM rdos_batch_catalogue
        WHERE tenant_id = #{tenantId} and catalogue_type = #{catalogueType} and  node_pid = 0  and is_deleted = 0 limit 1
    </select>

    <select id="getBeanByTenantIdAndNameAndParentId" resultType="BatchCatalogue">
        select
        <include refid="select_content_fragment"/>
        FROM rdos_batch_catalogue
        WHERE tenant_id = #{tenantId} and node_name = #{name} and  node_pid = #{parentId}  and is_deleted = 0 limit 1
    </select>

    <select id="listByPidAndNameFuzzy" resultType="BatchCatalogue">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_batch_catalogue
        WHERE is_deleted = 0 and project_id = #{projectId} and node_pid = #{nodePid} and node_name like CONCAT(#{name},'%') order by id desc
    </select>

    <update id="deleteByProjectId" parameterType="java.lang.Long">
        UPDATE rdos_batch_catalogue
        SET is_deleted = 1, gmt_modified = now()
        WHERE project_id = #{projectId} AND is_deleted = 0;
    </update>
</mapper>
