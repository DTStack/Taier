<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dtstack.batch.dao.RoleUserDao">

    <sql id="select_content_fragment">
        id,tenant_id,project_id,role_id,user_id,gmt_create,gmt_modified,is_deleted,create_user_id,modify_user_id
    </sql>

    <select id="listByUserIdAndTenantIdWithOutNoProject" resultMap="LazyRoleUserMap">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_role_user WHERE project_id <![CDATA[<>]]> -1 AND user_id=#{userId} AND tenant_id=#{tenantId} AND
        is_deleted=0
    </select>

    <select id="listRoleUserIsAdminByUserId" resultMap="LazyRoleUserMap">
        SELECT
        t.id, t.tenant_id, t.project_id, t.role_id, t.user_id, t.gmt_create, t.gmt_modified, t.is_deleted
        FROM  rdos_role_user t LEFT JOIN rdos_role p ON t.role_id=p.id
        WHERE p.role_value in (1,2,3,8,9) AND  t.project_id <![CDATA[<>]]> -1 AND t.user_id=#{userId}
        AND t.tenant_id=#{tenantId} AND t.is_deleted=0
    </select>

    <select id="listByUserIdProjectId" resultMap="LazyRoleUserMap">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_role_user WHERE user_id=#{userId} AND project_id=#{projectId} AND is_deleted=0
    </select>

    <select id="listByUserIdProjectIdTenantId" resultMap="LazyRoleUserMap">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_role_user WHERE user_id=#{userId} AND project_id=#{projectId} AND tenant_id = #{tenantId} AND is_deleted=0
    </select>

    <resultMap id="LazyRoleUserMap" type="com.dtstack.batch.domain.RoleUser" autoMapping="true">
        <id column="id" property="id"/>
        <result column="role_id" property="roleId"/>
        <result column="user_id" property="userId"/>
        <association property="role" column="role_id" javaType="com.dtstack.batch.domain.Role"
                     select="com.dtstack.batch.dao.RoleDao.getOne" fetchType="eager"/>
        <association property="user" column="user_id" javaType="com.dtstack.engine.api.domain.User"
                     select="com.dtstack.batch.dao.UserDao.getOne" fetchType="eager"/>
    </resultMap>

    <select id="listByProjectId" resultMap="LazyRoleUserMap">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_role_user WHERE project_id=#{projectId} AND is_deleted=0
    </select>

    <select id="listRoleUserIsAdminByUserIdProjectId" resultMap="LazyRoleUserMap">
        SELECT
        t.id, t.tenant_id, t.project_id, t.role_id, t.user_id, t.gmt_create, t.gmt_modified, t.is_deleted
        FROM  rdos_role_user t LEFT JOIN rdos_role p ON t.role_id=p.id
        WHERE p.role_value in (1,2,3,8,9) AND t.user_id=#{userId} AND t.project_id=#{projectId} AND t.is_deleted=0
    </select>

    <select id="listRoleUserIsAdminByProjectId" resultMap="LazyRoleUserMap">
        SELECT
        t.id, t.tenant_id, t.project_id, t.role_id, t.user_id, t.gmt_create, t.gmt_modified, t.is_deleted
        FROM  rdos_role_user t LEFT JOIN rdos_role p ON t.role_id=p.id
        WHERE p.role_value in (1,2,3,8,9) AND t.project_id=#{projectId} AND t.is_deleted=0
    </select>

    <update id="deleteByUserIdAndProjectId">
        UPDATE rdos_role_user
        SET is_deleted=1,gmt_modified=now(),modify_user_id=#{modifyUserId}
        WHERE  user_id=#{userId} AND project_id=#{projectId} and is_deleted=0
    </update>

    <update id="deleteByUserIdAndProjectIdAndTenantId">
        UPDATE rdos_role_user
        SET is_deleted=1,gmt_modified=now()
        WHERE  user_id=#{userId} AND project_id=#{projectId} AND tenant_id = #{tenantId} AND is_deleted=0
    </update>

    <update id="deleteByUserIdAndTenantIdAndRoleIds">
        UPDATE rdos_role_user
        SET is_deleted=1,gmt_modified=now()
        WHERE  user_id=#{userId} AND tenant_id = #{tenantId} AND is_deleted=0
        <if test="roleIds != null and roleIds.size >0">
            and role_id in
            <foreach collection="roleIds" open="(" close=")" separator="," item="roleId">
                #{roleId}
            </foreach>
        </if>
    </update>

    <update id="deleteTenantAdminRoles">
        UPDATE rdos_role_user
        SET is_deleted = 1,gmt_modified=now(),modify_user_id=#{modifyUserId}
        WHERE  tenant_id = #{tenantId} AND is_deleted = 0 AND role_id IN (SELECT id FROM rdos_role WHERE (tenant_id= #{tenantId} OR tenant_id = -1) AND role_value = 1 AND is_deleted = 0)
    </update>

    <select id="listByUserIdAndTenantId" resultMap="LazyRoleUserMap">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_role_user WHERE user_id=#{userId} and tenant_id=#{tenantId} AND is_deleted=0
    </select>

    <select id="getByRoleIdUserIdProjectIdWithoutNoProject" resultMap="LazyRoleUserMap">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_role_user WHERE project_id <![CDATA[<>]]> -1 AND role_id=#{roleId} AND user_id=#{userId} AND
        project_id=#{projectId} AND is_deleted=0 limit 1
    </select>

    <update id="deleteByRoleIdsAndUserIdAndProjectId">
        UPDATE rdos_role_user
        SET is_deleted=1,gmt_modified=now(),modify_user_id=#{modifyUserId}
        WHERE role_id IN
        <foreach item="roleId" index="index" collection="roleIds" separator="," open="(" close=")">
            #{roleId}
        </foreach>
        AND user_id=#{userId} AND project_id=#{projectId} AND is_deleted=0
    </update>

    <update id="deleteByRoleIdAndProjectId">
        UPDATE rdos_role_user
        SET is_deleted=1,gmt_modified=now(),modify_user_id=#{modifyUserId}
        WHERE role_id=#{roleId} AND project_id=#{projectId} AND is_deleted=0
    </update>

    <insert id="batchInsert" parameterType="com.dtstack.batch.domain.RoleUser" useGeneratedKeys="true" keyProperty="id">
        REPLACE INTO rdos_role_user
        (tenant_id,project_id,role_id,user_id)
        VALUES
        <foreach collection="roleUserList" item="item" separator=",">
            (#{item.tenantId},#{item.projectId},#{item.roleId},#{item.userId})
        </foreach>
    </insert>

    <select id="getNoProjectByUserId" resultMap="LazyRoleUserMap">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_role_user WHERE user_id=#{userId} AND project_id=-1 AND tenant_id=#{tenantId} AND is_deleted=0 limit 1
    </select>

    <select id="listByTenantIdAndProjectIdAndUserName" resultMap="LazyRoleUserMap">
        SELECT
        t.id,t.tenant_id,t.project_id,t.role_id,t.user_id,t.gmt_create,t.gmt_modified,t.is_deleted
        FROM rdos_role_user t
        where t.project_id=#{projectId} and t.tenant_id=#{tenantId} and t.is_deleted=0
    </select>

    <select id="listByRoleId" resultMap="LazyRoleUserMap">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_role_user
        where role_id = #{roleId} and is_deleted=0
    </select>

    <insert id="insert" parameterType="com.dtstack.batch.domain.RoleUser" useGeneratedKeys="true" keyProperty="id">
        REPLACE INTO rdos_role_user
        (tenant_id,project_id,role_id,user_id,create_user_id,modify_user_id)
        VALUES
        (#{tenantId},#{projectId},#{roleId},#{userId},#{createUserId},#{createUserId})
    </insert>

    <select id="getOne" resultType="com.dtstack.batch.domain.RoleUser">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_role_user WHERE id = #{id}
    </select>

    <select id="listByTenantId"  resultType="com.dtstack.batch.domain.RoleUser">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_role_user WHERE tenant_id = #{tenantId} and is_deleted = 0
    </select>

    <select id="listByTenantIdWithOutNoProject" resultMap="LazyRoleUserMap">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_role_user WHERE project_id <![CDATA[<>]]> -1 AND tenant_id=#{tenantId} AND
        is_deleted=0
    </select>

    <select id="getProjectOwnerByProjectId" resultType="com.dtstack.batch.domain.RoleUser">
        SELECT
        t.id,t.tenant_id,t.project_id,t.role_id,t.user_id,t.gmt_create,t.gmt_modified,t.is_deleted
        FROM rdos_role_user t LEFT JOIN rdos_role p ON t.role_id=p.id
        WHERE t.project_id = #{projectId} AND p.role_value = 2 AND t.is_deleted=0 limit 1
    </select>

    <select id="listByUserIdANdRoleValues" resultType="com.dtstack.batch.domain.RoleUser">
        SELECT
        t.id, t.tenant_id, t.project_id, t.role_id, t.user_id, t.gmt_create, t.gmt_modified, t.is_deleted
        FROM  rdos_role_user t LEFT JOIN rdos_role p ON t.role_id=p.id
        WHERE t.project_id <![CDATA[<>]]> -1 AND t.user_id=#{userId}
        <if test="roleValues != null and roleValues.size > 0">
            and p.role_value in
            <foreach collection="roleValues" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        <if test="tenantId != null" >
            and t.tenant_id = #{tenantId}
        </if>
        AND t.is_deleted=0
    </select>

    <select id="listRoleValueByUserIdAndProjectId" resultType="java.lang.Integer">
        SELECT r.role_value
        FROM rdos_role_user ru
        LEFT JOIN rdos_role r on r.id = ru.role_id
        WHERE ru.user_id = #{userId} and ru.tenant_id = #{tenantId} and ru.project_id = #{projectId} and ru.is_deleted = 0

    </select>

    <update id="deleteByProjectId" parameterType="java.lang.Long">
        UPDATE rdos_role_user
        SET is_deleted = 1, gmt_modified = now(), modify_user_id=#{modifyUserId}
        WHERE project_id = #{projectId} AND is_deleted = 0;
    </update>

    <select id="isDelByUserIdAndProjectId" resultType="java.lang.Integer">
        SELECT count(1)
        FROM rdos_role_user
        WHERE user_id = #{userId} and project_id = #{projectId} and is_deleted = 0

    </select>

    <select id="getLastTimeByUserIdAndProjectId" resultType="com.dtstack.batch.domain.RoleUser">
        SELECT user_id , project_id , max(gmt_modified) as gmt_modified
        FROM rdos_role_user
        WHERE user_id = #{userId} and project_id = #{projectId} and is_deleted = 1
        group by user_id , project_id
    </select>

    <select id="getReplyUserList" resultType="com.dtstack.batch.domain.RoleUser">
        select id, tenant_id, project_id, role_id, user_id, gmt_create, gmt_modified, is_deleted
        from rdos_role_user
        where user_id = #{userId} and project_id = #{projectId} and gmt_modified > #{gmtModifiedStart}  and #{gmtModifiedEnd} >= gmt_modified
    </select>

    <update id="replyDelUser">
        update rdos_role_user
        set is_deleted = 0 , gmt_modified = now()
        where user_id = #{userId} and project_id = #{projectId} and gmt_modified > #{gmtModifiedStart}  and #{gmtModifiedEnd} >= gmt_modified

    </update>

    <select id="listByRoleIdsAndUserId" resultType="com.dtstack.batch.domain.RoleUser">
        SELECT
        <include refid="select_content_fragment"/>
        FROM  rdos_role_user
        WHERE user_id = #{userId}
        <if test="roleIds != null and roleIds.size > 0">
            and role_id in
            <foreach collection="roleIds" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        AND is_deleted=0
    </select>

    <select id="listUserIdByRoleAndUsers" resultType="java.lang.Long">
        SELECT DISTINCT user_id
        FROM rdos_role_user
        WHERE tenant_id = #{tenantId} AND project_id = #{projectId} AND is_deleted = 0
        <if test="roleIds != null and roleIds.size() > 0">
            and role_id in
            <foreach collection="roleIds" index="index" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        <if test="userIds != null and userIds.size() > 0">
            and user_id in
            <foreach collection="userIds" index="index" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        <if test="pageQuery.orderBy != null and pageQuery.sort != null">
            order by ${pageQuery.orderBy} ${pageQuery.sort}
        </if>
        <if test="pageQuery.orderBy != null and pageQuery.sort == null">
            order by ${pageQuery.orderBy} desc
        </if>
        <if test="pageQuery.start != null and pageQuery.pageSize != null">
            limit #{pageQuery.start}, #{pageQuery.pageSize}
        </if>
        <if test="pageQuery.start == null and pageQuery.pageSize != null">
            limit #{pageQuery.pageSize}
        </if>
    </select>

    <select id="countByRoleAndUsers" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT user_id)
        FROM rdos_role_user
        WHERE tenant_id = #{tenantId} AND project_id = #{projectId} AND is_deleted = 0
        <if test="roleIds != null and roleIds.size() > 0">
            and role_id in
            <foreach collection="roleIds" index="index" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        <if test="userIds != null and userIds.size() > 0">
            and user_id in
            <foreach collection="userIds" index="index" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
    </select>

    <select id="listRoleByUserIdsAndProjectIds" resultType="com.dtstack.batch.domain.RoleUser">
        SELECT
        <include refid="select_content_fragment"/>
        FROM rdos_role_user
        WHERE project_id = #{projectId}
        AND is_deleted = 0
        <if test="userIds != null and userIds.size() > 0">
            AND user_id IN
            <foreach item="userId" index="index" collection="userIds" separator="," open="(" close=")">
                #{userId}
            </foreach>
        </if>
    </select>

    <select id="listUsersByProjectId" resultType="java.lang.Long">
        SELECT DISTINCT user_id
        FROM rdos_role_user
        WHERE project_id = #{projectId} AND is_deleted = 0
    </select>
</mapper>